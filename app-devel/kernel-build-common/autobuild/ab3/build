abinfo "Preparing build environment ..."
OLDARCH="$ARCH"
unset ARCH
if [[ "${CROSS:-$ARCH}" = "amd64" ]]; then
    SRCARCH="x86"
elif [[ "${CROSS:-$ARCH}" = "arm64" ]]; then
    SRCARCH="arm64"
elif [[ "${CROSS:-$ARCH}" = "loongarch64" ]]; then
    SRCARCH="loongarch"
elif [[ "${CROSS:-$ARCH}" = "loongson3" || \
        "${CROSS:-$ARCH}" = "mips64r6el" ]]; then
    SRCARCH="mips"
elif [[ "${CROSS:-$ARCH}" = "ppc64el" ]]; then
    SRCARCH="powerpc"
elif [[ "${CROSS:-$ARCH}" = "riscv64" ]]; then
    SRCARCH="riscv"
fi

abinfo "Installing / adapting kernel configuration ..."
__EFFECTIVE_CONF="$SRCDIR"/.config
__ORIGIN_CONF="$SRCDIR"/autobuild/$OLDARCH/config
__SORTED_EFFECTIVE_CONF="$SRCDIR"/.config-sorted
cp -v "$__ORIGIN_CONF" "$__EFFECTIVE_CONF"
make ${MAKE_AFTER} oldconfig

abinfo "Setting up variables ..."
. "$SRCDIR"/autobuild/build-common/set-var

abinfo "Sanity check: kernel config did not change"
/usr/bin/kernel-sort-config > "$__SORTED_EFFECTIVE_CONF" < "$__EFFECTIVE_CONF"
DIFF_OUT=$(diff -ur "$__ORIGIN_CONF" "$__SORTED_EFFECTIVE_CONF" || true)
if [[ ! -z $DIFF_OUT ]]; then
	aberr "Effective kernel config is different from source! Features might have been enabled/disabled without getting tracked by abbs source."
	aberr "Updated effective config is at '$SRCDIR/.config-sorted'."
	abinfo "Difference as follows:"
	echo "$DIFF_OUT"
	abdie "Copy effective config back to abbs source directory if applicable."
fi
unset __EFFECTIVE_CONF __ORIGIN_CONF __SORTED_EFFECTIVE_CONF

abinfo "Sanity check: version and local name should match package name"
if [[ "$LOCALNAME" == "-aosc-main" ]]; then
	EXPECTED_PKGNAME="linux-kernel-$version"
else
	EXPECTED_PKGNAME="linux-kernel${LOCALNAME//-aosc/}-$version"
fi
if [[ "$PKGNAME" != "$EXPECTED_PKGNAME" ]]; then
	aberr "Building version $EXPECTED_PKGNAME but PKGNAME is $PKGNAME! Fix your defines/config!"
	abdie
fi
unset EXPECTED_PKGNAME

abinfo "Building Kernel ..."
if [[ "${CROSS:-$ARCH}" = "riscv64" ]]; then
	# FIXME: get rid of this abomination when gcc on rv64 no longer segfaults
	__COUNTER=1
	__MAX_ATTEMPT=3
	while [[ "$__COUNTER" -le "$__MAX_ATTEMPT" ]]; do
		abinfo "Round $__COUNTER ..."
		make ${MAKE_AFTER}
		if (($?)); then
			__COUNTER=$((_COUNTER + 1))
		else
			break
		fi
	done
	if [[ "$__COUNTER" -gt "$__MAX_ATTEMPT" ]]; then
		aberr "Admitting defeat after $__MAX_ATTEMPT attempts"
	fi
else
	make ${MAKE_AFTER}
fi

abinfo "Stripping Kernel modules ..."
. "$SRCDIR"/autobuild/build-common/strip-modules

abinfo "Installing Kernel modules ..."
mkdir -pv "$PKGDIR"/usr
make modules_install \
    INSTALL_MOD_PATH="$PKGDIR"/usr ${MAKE_AFTER}

abinfo "Installing Kernel image ..."
if [[ "${CROSS:-$ARCH}" = "amd64" ]]; then
    install -Dvm644 "$SRCDIR"/arch/x86/boot/bzImage \
        "$PKGDIR"/boot/vmlinuz-$version$LOCALNAME
elif [[ "${CROSS:-$ARCH}" = "arm64" ]]; then
    install -Dvm644 "$SRCDIR"/arch/arm64/boot/Image \
        "$PKGDIR"/usr/lib/aosc-os-arm64-boot/linux-kernel-$version$LOCALNAME/Image
    mkdir -pv "$PKGDIR"/boot
    find "$SRCDIR"/arch/arm64/boot/dts/ \
        -name '*.dtb' \
        -exec install -Dvm644 {} \
             -t "$PKGDIR"/usr/lib/aosc-os-arm64-boot/dtbs-kernel-$version$LOCALNAME/ ';'
    install -Dvm644 "$SRCDIR"/arch/arm64/boot/Image \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME
elif [[ "${CROSS:-$ARCH}" = "riscv64" ]]; then
    install -Dvm644 "$SRCDIR"/arch/riscv/boot/Image \
        "$PKGDIR"/usr/lib/aosc-os-riscv64-boot/linux-kernel-$version$LOCALNAME/Image
    mkdir -pv "$PKGDIR"/boot
    for i in `find "$SRCDIR"/arch/riscv/boot/dts/ -name '*.dtb'`; do
        install -Dvm644 $i -t \
            "$PKGDIR"/usr/lib/aosc-os-riscv64-boot/dtbs-kernel-$version$LOCALNAME/"$(basename $(dirname $i))"
    done
    install -Dvm644 "$SRCDIR"/arch/riscv/boot/Image \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME
elif [[ "${CROSS:-$ARCH}" = "loongarch64" ]]; then
    install -Dvm644 "$SRCDIR"/arch/loongarch/boot/vmlinux.efi \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME
elif [[ "${CROSS:-$ARCH}" = "loongson3" ]]; then
    install -Dvm644 "$SRCDIR"/vmlinuz \
        "$PKGDIR"/boot/vmlinuz-$version$LOCALNAME
elif [[  "${CROSS:-$ARCH}" = "ppc64el" ]]; then
    install -Dvm644 "$SRCDIR"/vmlinux \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME
elif [[ "${CROSS:-$ARCH}" = "mips64r6el" ]]; then
    install -Dvm644 "$SRCDIR"/arch/mips/boot/vmlinux.gz.itb \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME.itb
    install -Dvm644 "$SRCDIR"/vmlinux \
        "$PKGDIR"/boot/vmlinux-$version$LOCALNAME
fi

abinfo 'Resetting $ARCH variable ...'
export ARCH="$OLDARCH"

abinfo "Removing firmwares ..."
rm -rfv "$PKGDIR"/usr/lib/firmware

abinfo "Building and installing Kernel modules ..."
. "$SRCDIR"/autobuild/build-common/ext-hdr

# Note: objtool targets x86 only and will not build on other architectures
# Ref: https://github.com/torvalds/linux/blob/v5.19/tools/objtool/Documentation/objtool.txt
if [[ "$SRCARCH" == "x86" ]]; then
    abinfo "Building objtool ..."
    (cd "$SRCDIR"/tools/objtool; make)

    abinfo "Installing objtool ..."
    install -Dvm755 "$SRCDIR"/tools/objtool/objtool \
        "$PKGDIR"/usr/src/linux-headers-${version}${LOCALNAME}/tools/objtool/objtool
fi

if [ -f "$SRCDIR"/System.map ]; then
    abinfo "Copying System.map"
    install -Dvm644 "$SRCDIR"/System.map \
        "$PKGDIR"/usr/lib/modules/${version}${LOCALNAME}/System.map
else
    abwarn "No System.map found"
fi

abinfo "Generating installation and uninstallation scripts ..."
. "$SRCDIR"/autobuild/build-common/gen-scripts
