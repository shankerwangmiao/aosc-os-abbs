unset CFLAGS
unset CPPFLAGS
unset LDFLAGS

ln -sv /usr/bin/ld.bfd "$SRCDIR"/ld
export PATH="$SRCDIR:$PATH"

sed -e 's|^EXTRAVERSION = -rc.*|EXTRAVERSION =|g' -i Makefile

if [[ "${CROSS:-$ARCH}" = "mips64r6el" ]] ; then
	# Work around LD's brainlessness
	export LDEMULATION="elf64ltsmip"
fi

# $1 = toolchain program name (say rustc / bindgen)
# $2 = path to config
# prints toolchain version used in the kernel config or kernel minimum if not specified
rust_cmd_version() {
	local PROG="$1"
	local CONFIG="$2"
	local CONFIG_VERSION=$(grep "${PROG^^}_VERSION_TEXT" "$CONFIG" | cut -f 2 -d '=' | tr -d '"' | cut -f 2 -d ' ')
	if (($?)); then
		CONFIG_VERSION=$(scripts/min-tool-version.sh ${PROG})
		aberr "Unable to determine desired $PROG version - using $CONFIG_VERSION"
	fi
	echo "$CONFIG_VERSION"
}

abinfo "Checking whether this kernel needs rust"
if grep -q 'CONFIG_RUST_IS_AVAILABLE=y' "${SRCDIR}/autobuild/$ARCH/config"; then
	abinfo "Checking whether llvm is part of BUILDDEP..."
	if [[ "$BUILDDEP" != *"llvm"* ]]; then
		aberr "Missing LLVM - rust builds will fail! You need to add llvm to BUILDDEP."
		abdie
	fi

	RUSTC_VERSION=$(rust_cmd_version rustc "${SRCDIR}/autobuild/$ARCH/config")

	abinfo "Downloading rustup and toolchain ${RUSTC_VERSION}..."
	curl https://sh.rustup.rs -sSf | sh -s -- \
		-y \
		--no-modify-path \
		--default-toolchain ${RUSTC_VERSION} \
		--component rust-src
	export PATH="$HOME/.cargo/bin:$PATH"

	BINDGEN_VERSION=$(rust_cmd_version bindgen "${SRCDIR}/autobuild/$ARCH/config")
	BINDGEN_MAJOR=$(echo $BINDGEN_VERSION | cut -f 1 -d '.')
	BINDGEN_MINOR=$(echo $BINDGEN_VERSION | cut -f 2 -d '.')

	if [[ $BINDGEN_MAJOR -eq 0 ]] && [[ $BINDGEN_MINOR -lt 61 ]]; then
		BINDGEN_CRATE="bindgen"
	else
		BINDGEN_CRATE="bindgen-cli"
	fi

	abinfo "Installing bindgen ${BINDGEN_VERSION}..."
	cargo install --locked --version ${BINDGEN_VERSION} ${BINDGEN_CRATE}

	abinfo "Checking whether kernel likes this toolchain"
	if make rustavailable; then
		abinfo "Kernel has found rust support"
	else
		aberr "Kernel could not find rust. Aborting"
		abdie
	fi
elif grep -q 'CONFIG_HAVE_RUST=y' "${SRCDIR}/autobuild/$ARCH/config"; then
	abwarn "Rust is supported by kernel but is not enabled in the config"
fi

