From e5afb7dcff0760f82e2d2a8a18396da6d3cba72a Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Mon, 31 Jul 2017 16:26:25 +0800
Subject: [PATCH 048/136] mvsas: Optimise performance and stability

1, Use cyclic searching to alloc command slot.
2, Use bidirectional DMA for SMP request/response.
3, Reduce queue depth of SAS disks for Loongson-3.
4, Reduce granularity and timeout value of interrupt coalescing for Loongson-3.

Signed-off-by: Huacai Chen <chenhc@lemote.com>
---
 drivers/scsi/mvsas/mv_64xx.c |  8 ++++++++
 drivers/scsi/mvsas/mv_94xx.c |  8 ++++++++
 drivers/scsi/mvsas/mv_init.c |  6 +++++-
 drivers/scsi/mvsas/mv_sas.c  | 37 +++++++++++++++++++++++++++---------
 drivers/scsi/mvsas/mv_sas.h  |  2 ++
 5 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/drivers/scsi/mvsas/mv_64xx.c b/drivers/scsi/mvsas/mv_64xx.c
index 1f2b61de8..b51aab21b 100644
--- a/drivers/scsi/mvsas/mv_64xx.c
+++ b/drivers/scsi/mvsas/mv_64xx.c
@@ -376,10 +376,14 @@ static int mvs_64xx_init(struct mvs_info *mvi)
 	 * it will make count 0.
 	 */
 	tmp = 0;
+#ifdef CONFIG_CPU_LOONGSON3
+	mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 	if (MVS_CHIP_SLOT_SZ > 0x1ff)
 		mw32(MVS_INT_COAL, 0x1ff | COAL_EN);
 	else
 		mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ | COAL_EN);
+#endif
 
 	tmp = 0x10000 | interrupt_coalescing;
 	mw32(MVS_INT_COAL_TMOUT, tmp);
@@ -748,10 +752,14 @@ static void mvs_64xx_tune_interrupt(struct mvs_info *mvi, u32 time)
 		mw32(MVS_INT_COAL, 0);
 		mw32(MVS_INT_COAL_TMOUT, 0x10000);
 	} else {
+#ifdef CONFIG_CPU_LOONGSON3
+		mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 		if (MVS_CHIP_SLOT_SZ > 0x1ff)
 			mw32(MVS_INT_COAL, 0x1ff|COAL_EN);
 		else
 			mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ|COAL_EN);
+#endif
 
 		tmp = 0x10000 | time;
 		mw32(MVS_INT_COAL_TMOUT, tmp);
diff --git a/drivers/scsi/mvsas/mv_94xx.c b/drivers/scsi/mvsas/mv_94xx.c
index fc0b8eb68..bb996a9df 100644
--- a/drivers/scsi/mvsas/mv_94xx.c
+++ b/drivers/scsi/mvsas/mv_94xx.c
@@ -515,10 +515,14 @@ static int mvs_94xx_init(struct mvs_info *mvi)
 	 * it will make count 0.
 	 */
 	tmp = 0;
+#ifdef CONFIG_CPU_LOONGSON3
+	mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 	if (MVS_CHIP_SLOT_SZ > 0x1ff)
 		mw32(MVS_INT_COAL, 0x1ff | COAL_EN);
 	else
 		mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ | COAL_EN);
+#endif
 
 	/* default interrupt coalescing time is 128us */
 	tmp = 0x10000 | interrupt_coalescing;
@@ -1027,10 +1031,14 @@ static void mvs_94xx_tune_interrupt(struct mvs_info *mvi, u32 time)
 		mw32(MVS_INT_COAL, 0);
 		mw32(MVS_INT_COAL_TMOUT, 0x10000);
 	} else {
+#ifdef CONFIG_CPU_LOONGSON3
+		mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 		if (MVS_CHIP_SLOT_SZ > 0x1ff)
 			mw32(MVS_INT_COAL, 0x1ff|COAL_EN);
 		else
 			mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ|COAL_EN);
+#endif
 
 		tmp = 0x10000 | time;
 		mw32(MVS_INT_COAL_TMOUT, tmp);
diff --git a/drivers/scsi/mvsas/mv_init.c b/drivers/scsi/mvsas/mv_init.c
index 0c5e2c610..7a7bb9705 100644
--- a/drivers/scsi/mvsas/mv_init.c
+++ b/drivers/scsi/mvsas/mv_init.c
@@ -10,7 +10,11 @@
 
 #include "mv_sas.h"
 
+#ifdef CONFIG_CPU_LOONGSON3
+int interrupt_coalescing = 0x08;
+#else
 int interrupt_coalescing = 0x80;
+#endif
 
 static struct scsi_transport_template *mvs_stt;
 static const struct mvs_chip_info mvs_chips[] = {
@@ -34,7 +38,7 @@ static struct scsi_host_template mvs_sht = {
 	.name			= DRV_NAME,
 	.queuecommand		= sas_queuecommand,
 	.target_alloc		= sas_target_alloc,
-	.slave_configure	= sas_slave_configure,
+	.slave_configure	= mvs_slave_configure,
 	.scan_finished		= mvs_scan_finished,
 	.scan_start		= mvs_scan_start,
 	.change_queue_depth	= sas_change_queue_depth,
diff --git a/drivers/scsi/mvsas/mv_sas.c b/drivers/scsi/mvsas/mv_sas.c
index 3e0b8ebe2..70f80c3d3 100644
--- a/drivers/scsi/mvsas/mv_sas.c
+++ b/drivers/scsi/mvsas/mv_sas.c
@@ -42,12 +42,17 @@ inline int mvs_tag_alloc(struct mvs_info *mvi, u32 *tag_out)
 	unsigned int index, tag;
 	void *bitmap = mvi->tags;
 
-	index = find_first_zero_bit(bitmap, mvi->tags_num);
-	tag = index;
-	if (tag >= mvi->tags_num)
+	index = find_next_zero_bit(bitmap, mvi->tags_num, mvi->next_tag);
+	index = (index < mvi->tags_num)?
+			index:find_first_zero_bit(bitmap, mvi->tags_num);
+
+	if (index >= mvi->tags_num)
 		return -SAS_QUEUE_FULL;
+
+	tag = index;
 	mvs_tag_set(mvi, tag);
 	*tag_out = tag;
+	mvi->next_tag = (tag + 1) % mvi->tags_num;
 	return 0;
 }
 
@@ -266,6 +271,20 @@ static void mvs_bytes_dmaed(struct mvs_info *mvi, int i)
 				   PORTE_BYTES_DMAED);
 }
 
+int mvs_slave_configure(struct scsi_device *sdev)
+{
+	struct domain_device *dev = sdev_to_domain_dev(sdev);
+
+	sas_slave_configure(sdev);
+
+#ifdef CONFIG_CPU_LOONGSON3
+	if (!dev_is_sata(dev))
+		scsi_change_queue_depth(sdev, MVS_QUEUE_SIZE);
+#endif
+
+	return 0;
+}
+
 void mvs_scan_start(struct Scsi_Host *shost)
 {
 	int i, j;
@@ -320,13 +339,13 @@ static int mvs_task_prep_smp(struct mvs_info *mvi,
 	 * DMA-map SMP request, response buffers
 	 */
 	sg_req = &task->smp_task.smp_req;
-	elem = dma_map_sg(mvi->dev, sg_req, 1, DMA_TO_DEVICE);
+	elem = dma_map_sg(mvi->dev, sg_req, 1, DMA_BIDIRECTIONAL);
 	if (!elem)
 		return -ENOMEM;
 	req_len = sg_dma_len(sg_req);
 
 	sg_resp = &task->smp_task.smp_resp;
-	elem = dma_map_sg(mvi->dev, sg_resp, 1, DMA_FROM_DEVICE);
+	elem = dma_map_sg(mvi->dev, sg_resp, 1, DMA_BIDIRECTIONAL);
 	if (!elem) {
 		rc = -ENOMEM;
 		goto err_out;
@@ -400,10 +419,10 @@ static int mvs_task_prep_smp(struct mvs_info *mvi,
 
 err_out_2:
 	dma_unmap_sg(mvi->dev, &tei->task->smp_task.smp_resp, 1,
-		     DMA_FROM_DEVICE);
+		     DMA_BIDIRECTIONAL);
 err_out:
 	dma_unmap_sg(mvi->dev, &tei->task->smp_task.smp_req, 1,
-		     DMA_TO_DEVICE);
+		     DMA_BIDIRECTIONAL);
 	return rc;
 }
 
@@ -887,9 +906,9 @@ static void mvs_slot_task_free(struct mvs_info *mvi, struct sas_task *task,
 	switch (task->task_proto) {
 	case SAS_PROTOCOL_SMP:
 		dma_unmap_sg(mvi->dev, &task->smp_task.smp_resp, 1,
-			     DMA_FROM_DEVICE);
+			     DMA_BIDIRECTIONAL);
 		dma_unmap_sg(mvi->dev, &task->smp_task.smp_req, 1,
-			     DMA_TO_DEVICE);
+			     DMA_BIDIRECTIONAL);
 		break;
 
 	case SAS_PROTOCOL_SATA:
diff --git a/drivers/scsi/mvsas/mv_sas.h b/drivers/scsi/mvsas/mv_sas.h
index 519edc796..102626631 100644
--- a/drivers/scsi/mvsas/mv_sas.h
+++ b/drivers/scsi/mvsas/mv_sas.h
@@ -371,6 +371,7 @@ struct mvs_info {
 	const struct mvs_chip_info *chip;
 
 	int tags_num;
+	int next_tag;
 	unsigned long *tags;
 	/* further per-slot information */
 	struct mvs_phy phy[MVS_MAX_PHYS];
@@ -436,6 +437,7 @@ int mvs_phy_control(struct asd_sas_phy *sas_phy, enum phy_func func,
 			void *funcdata);
 void mvs_set_sas_addr(struct mvs_info *mvi, int port_id, u32 off_lo,
 		      u32 off_hi, u64 sas_addr);
+int mvs_slave_configure(struct scsi_device *sdev);
 void mvs_scan_start(struct Scsi_Host *shost);
 int mvs_scan_finished(struct Scsi_Host *shost, unsigned long time);
 int mvs_queue_command(struct sas_task *task, gfp_t gfp_flags);
-- 
2.39.1

