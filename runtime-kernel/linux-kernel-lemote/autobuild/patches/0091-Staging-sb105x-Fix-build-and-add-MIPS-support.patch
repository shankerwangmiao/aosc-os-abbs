From bb72a34cb77a805b8fcf4f8f930f2e99b71cb666 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Thu, 1 Dec 2016 09:51:35 +0800
Subject: [PATCH 091/136] Staging: sb105x: Fix build and add MIPS support

Signed-off-by: Huacai Chen <chenhc@lemote.com>
---
 arch/mips/include/asm/serial.h     |  1 +
 drivers/staging/sb105x/Kconfig     |  2 +-
 drivers/staging/sb105x/sb_pci_mp.c | 54 ++++++++++--------------------
 drivers/staging/sb105x/sb_pci_mp.h |  3 +-
 4 files changed, 20 insertions(+), 40 deletions(-)

diff --git a/arch/mips/include/asm/serial.h b/arch/mips/include/asm/serial.h
index 2777148db..a780ee51a 100644
--- a/arch/mips/include/asm/serial.h
+++ b/arch/mips/include/asm/serial.h
@@ -12,6 +12,7 @@
  */
 #define BASE_BAUD 0
 #else
+#define STD_COM_FLAGS (ASYNC_BOOT_AUTOCONF | ASYNC_SKIP_TEST)
 #include <asm-generic/serial.h>
 #endif
 
diff --git a/drivers/staging/sb105x/Kconfig b/drivers/staging/sb105x/Kconfig
index 245e7847a..c5f741e71 100644
--- a/drivers/staging/sb105x/Kconfig
+++ b/drivers/staging/sb105x/Kconfig
@@ -1,7 +1,7 @@
 config SB105X
 	tristate "SystemBase PCI Multiport UART"
 	select SERIAL_CORE
-	depends on PCI && X86 && TTY && BROKEN
+	depends on PCI && (X86 || MIPS) && TTY
 	help
 	  A driver for the SystemBase Multi-2/PCI serial card
 
diff --git a/drivers/staging/sb105x/sb_pci_mp.c b/drivers/staging/sb105x/sb_pci_mp.c
index c9d6ee390..18e91bc61 100644
--- a/drivers/staging/sb105x/sb_pci_mp.c
+++ b/drivers/staging/sb105x/sb_pci_mp.c
@@ -1,6 +1,7 @@
 #include "sb_pci_mp.h"
 #include <linux/module.h>
 #include <linux/parport.h>
+#include <linux/sched/signal.h>
 
 extern struct parport *parport_pc_probe_port(unsigned long base_lo,
 		unsigned long base_hi,
@@ -87,7 +88,7 @@ static irqreturn_t multi_interrupt(int irq, void *dev_id);
 static void serial_do_unlink(struct irq_info *i, struct mp_port *mtpt);
 static int serial_link_irq_chain(struct mp_port *mtpt);
 static void serial_unlink_irq_chain(struct mp_port *mtpt);
-static void multi_timeout(unsigned long data);
+static void multi_timeout(struct timer_list *t);
 static unsigned int multi_tx_empty(struct sb_uart_port *port);
 static unsigned int multi_get_mctrl(struct sb_uart_port *port);
 static void multi_set_mctrl(struct sb_uart_port *port, unsigned int mctrl);
@@ -315,7 +316,6 @@ static int set_multidrop_mode(struct sb_uart_port *port, unsigned int mode)
 	sb1054_set_register(port, PAGE_1, SB105XA_MDR, mdr);
 	port->mdmode &= ~0x6;
 	port->mdmode |= mode;
-	printk("[%d] multidrop init: %x\n", port->line, port->mdmode);
 
 	return 0;
 }
@@ -494,7 +494,6 @@ static void mp_tasklet_action(unsigned long data)
 	struct sb_uart_state *state = (struct sb_uart_state *)data;
 	struct tty_struct *tty;
 
-	printk("tasklet is called!\n");
 	tty = state->info->tty;
 	tty_wakeup(tty);
 }
@@ -897,9 +896,6 @@ static int mp_set_info(struct sb_uart_state *state, struct serial_struct *newinf
 	state->close_delay     = new_serial.close_delay;
 	state->closing_wait    = closing_wait;
 	port->fifosize         = new_serial.xmit_fifo_size;
-	if (state->info->tty)
-		state->info->tty->low_latency =
-			(port->flags & UPF_LOW_LATENCY) ? 1 : 0;
 
 check_and_exit:
 	retval = 0;
@@ -1315,26 +1311,21 @@ static void mp_close(struct tty_struct *tty, struct file *filp)
 	struct sb_uart_state *state = tty->driver_data;
 	struct sb_uart_port *port;
 
-	printk("mp_close!\n");
 	if (!state || !state->port)
 		return;
 
 	port = state->port;
 
-	printk("close1 %d\n", __LINE__);
 	MP_STATE_LOCK(state);
 
-	printk("close2 %d\n", __LINE__);
 	if (tty_hung_up_p(filp))
 		goto done;
 
-	printk("close3 %d\n", __LINE__);
 	if ((tty->count == 1) && (state->count != 1)) {
 		printk("mp_close: bad serial port count; tty->count is 1, "
 				"state->count is %d\n", state->count);
 		state->count = 1;
 	}
-	printk("close4 %d\n", __LINE__);
 	if (--state->count < 0) {
 		printk("rs_close: bad serial port count for ttyMP%d: %d\n",
 				port->line, state->count);
@@ -1345,11 +1336,9 @@ static void mp_close(struct tty_struct *tty, struct file *filp)
 
 	tty->closing = 1;
 
-	printk("close5 %d\n", __LINE__);
 	if (state->closing_wait != USF_CLOSING_WAIT_NONE)
 		tty_wait_until_sent(tty, state->closing_wait);
 
-	printk("close6 %d\n", __LINE__);
 	if (state->info->flags & UIF_INITIALIZED) {
 		unsigned long flags;
 		spin_lock_irqsave(&port->lock, flags);
@@ -1357,10 +1346,8 @@ static void mp_close(struct tty_struct *tty, struct file *filp)
 		spin_unlock_irqrestore(&port->lock, flags);
 		mp_wait_until_sent(tty, port->timeout);
 	}
-	printk("close7 %d\n", __LINE__);
 
 	mp_shutdown(state);
-	printk("close8 %d\n", __LINE__);
 	mp_flush_buffer(tty);
 	tty_ldisc_flush(tty);
 	tty->closing = 0;
@@ -1377,13 +1364,11 @@ static void mp_close(struct tty_struct *tty, struct file *filp)
 	{
 		mp_change_pm(state, 3);
 	}
-	printk("close8 %d\n", __LINE__);
 
 	state->info->flags &= ~UIF_NORMAL_ACTIVE;
 	wake_up_interruptible(&state->info->open_wait);
 
 done:
-	printk("close done\n");
 	MP_STATE_UNLOCK(state);
 	module_put(THIS_MODULE);
 }
@@ -1571,8 +1556,6 @@ static int mp_open(struct tty_struct *tty, struct file *filp)
 	mtpt  = (struct mp_port *)state->port;
 
 	tty->driver_data = state;
-	tty->low_latency = (state->port->flags & UPF_LOW_LATENCY) ? 1 : 0;
-	tty->alt_speed = 0;
 	state->info->tty = tty;
 
 	if (tty_hung_up_p(filp)) {
@@ -1705,7 +1688,7 @@ static void mp_unconfigure_port(struct uart_driver *drv, struct sb_uart_state *s
 
 	MP_STATE_UNLOCK(state);
 }
-static struct tty_operations mp_ops = {
+static struct tty_operations sb_mp_ops = {
 	.open		= mp_open,
 	.close		= mp_close,
 	.write		= mp_write,
@@ -1725,7 +1708,7 @@ static struct tty_operations mp_ops = {
 	.break_ctl	= mp_break_ctl,
 	.wait_until_sent= mp_wait_until_sent,
 #ifdef CONFIG_PROC_FS
-	.proc_fops	= NULL,
+	.proc_show	= NULL,
 #endif
 	.tiocmget	= mp_tiocmget,
 	.tiocmset	= mp_tiocmset,
@@ -1770,7 +1753,7 @@ static int mp_register_driver(struct uart_driver *drv)
 	normal->flags		= TTY_DRIVER_REAL_RAW | TTY_DRIVER_DYNAMIC_DEV;
 	normal->driver_state    = drv;
 
-	tty_set_operations(normal, &mp_ops);
+	tty_set_operations(normal, &sb_mp_ops);
 
 for (i = 0; i < drv->nr; i++) {
 	struct sb_uart_state *state = drv->state + i;
@@ -1837,6 +1820,7 @@ static int mp_add_one_port(struct uart_driver *drv, struct sb_uart_port *port)
 
 	mp_configure_port(drv, state, port);
 
+	tty_port_link_device(&tt_port[port->line], drv->tty_driver, port->line);
 	tty_register_device(drv->tty_driver, port->line, port->dev);
 
 out:
@@ -2070,7 +2054,6 @@ static void multi_enable_ms(struct sb_uart_port *port)
 
 static _INLINE_ void receive_chars(struct mp_port *mtpt, int *status )
 {
-	struct tty_struct *tty = mtpt->port.info->tty;
 	unsigned char lsr = *status;
 	int max_count = 256;
 	unsigned char ch;
@@ -2112,18 +2095,18 @@ static _INLINE_ void receive_chars(struct mp_port *mtpt, int *status )
 				mtpt->port.icount.overrun++;
 				flag = TTY_OVERRUN;
 			}
-			tty_insert_flip_char(tty, ch, flag);
+			tty_insert_flip_char(&tt_port[mtpt->port.line], ch, flag);
 		}
 		else
 		{
 			ch = serial_inp(mtpt, UART_RX);
-			tty_insert_flip_char(tty, ch, 0);
+			tty_insert_flip_char(&tt_port[mtpt->port.line], ch, 0);
 		}
 ignore_char:
 		lsr = serial_inp(mtpt, UART_LSR);
 	} while ((lsr & UART_LSR_DR) && (max_count-- > 0));
 
-	tty_flip_buffer_push(tty);
+	tty_flip_buffer_push(&tt_port[mtpt->port.line]);
 }
 
 
@@ -2152,7 +2135,6 @@ static _INLINE_ void transmit_chars(struct mp_port *mtpt)
 		count = mtpt->port.fifosize;
 	}
 
-	printk("[%d] mdmode: %x\n", mtpt->port.line, mtpt->port.mdmode);
 	do {
 #if 0
 		/* check multi-drop mode */
@@ -2245,10 +2227,8 @@ static irqreturn_t multi_interrupt(int irq, void *dev_id)
 		mtpt = list_entry(lhead, struct mp_port, list);
 		
 		iir = serial_in(mtpt, UART_IIR);
-		printk("interrupt! port %d, iir 0x%x\n", mtpt->port.line, iir); //wlee
 		if (!(iir & UART_IIR_NO_INT)) 
 		{
-			printk("interrupt handle\n");
 			spin_lock(&mtpt->port.lock);
 			multi_handle_port(mtpt);
 			spin_unlock(&mtpt->port.lock);
@@ -2328,10 +2308,9 @@ static void serial_unlink_irq_chain(struct mp_port *mtpt)
 	serial_do_unlink(i, mtpt);
 }
 
-static void multi_timeout(unsigned long data)
+static void multi_timeout(struct timer_list *t)
 {
-	struct mp_port *mtpt = (struct mp_port *)data;
-
+	struct mp_port *mtpt = from_timer(mtpt, t, timer);
 
 	spin_lock(&mtpt->port.lock);
 	multi_handle_port(mtpt);
@@ -2448,7 +2427,6 @@ static int multi_startup(struct sb_uart_port *port)
 
 		timeout = timeout > 6 ? (timeout / 2 - 2) : 1;
 
-		mtpt->timer.data = (unsigned long)mtpt;
 		mod_timer(&mtpt->timer, jiffies + timeout);
 	} 
 	else 
@@ -2845,7 +2823,6 @@ static void __init multi_init_ports(void)
 			else
 			{
 				b_ret = read_option_register(mtpt,(MP_OPTR_IIR0 + i/8));
-				printk("IIR_RET = %x\n",b_ret);
 			}
 
 			/* default to RS232 */
@@ -2869,8 +2846,8 @@ static void __init multi_register_ports(struct uart_driver *drv)
 
 		mtpt->port.line = i;
 		mtpt->port.ops = &multi_pops;
-		init_timer(&mtpt->timer);
-		mtpt->timer.function = multi_timeout;
+		timer_setup(&mtpt->timer, multi_timeout, 0);
+		tty_port_init(&tt_port[i]);
 		mp_add_one_port(drv, &mtpt->port);
 	}
 }
@@ -3146,7 +3123,10 @@ printk("FOUND~~~\n");
 //			if (mp_pciboards[i].device_id & 0x0800)
 			{
 				int status;
-	        		pci_disable_device(dev);
+
+				if (pci_is_enabled(dev))
+					pci_disable_device(dev);
+
 	        		status = pci_enable_device(dev);
             
 	   		     	if (status != 0)
diff --git a/drivers/staging/sb105x/sb_pci_mp.h b/drivers/staging/sb105x/sb_pci_mp.h
index 80ae4ab04..0920beb31 100644
--- a/drivers/staging/sb105x/sb_pci_mp.h
+++ b/drivers/staging/sb105x/sb_pci_mp.h
@@ -287,5 +287,4 @@ static const struct sb105x_uart_config uart_config[] = {
         { "SB16C1050A",    128,    UART_CLEAR_FIFO | UART_USE_FIFO | UART_STARTECH },
 };
 
-
-
+static struct tty_port tt_port[MAX_MP_PORT];
-- 
2.39.1

