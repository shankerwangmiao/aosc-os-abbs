From b3882a4c185bee4820c798fdf1b094a23f7a201c Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Fri, 29 Nov 2019 09:11:38 +0800
Subject: [PATCH 015/136] MIPS: Loongson: Add constant timer support

Signed-off-by: Huacai Chen <chenhc@lemote.com>
---
 arch/mips/include/asm/clocksource.h           |   1 +
 arch/mips/include/asm/cpu-features.h          |   4 +
 arch/mips/include/asm/cpu.h                   |   1 +
 .../asm/mach-loongson64/loongson_regs.h       |  30 ++
 arch/mips/include/asm/mipsregs.h              |   2 +
 arch/mips/include/asm/time.h                  |  20 +-
 arch/mips/include/asm/vdso/gettimeofday.h     |  23 ++
 arch/mips/kernel/cpu-probe.c                  |  16 ++
 arch/mips/loongson64/loongson-3/Makefile      |   2 +-
 .../loongson64/loongson-3/constant_timer.c    | 256 ++++++++++++++++++
 arch/mips/loongson64/loongson-3/smp.c         |  34 ++-
 11 files changed, 371 insertions(+), 18 deletions(-)
 create mode 100644 arch/mips/loongson64/loongson-3/constant_timer.c

diff --git a/arch/mips/include/asm/clocksource.h b/arch/mips/include/asm/clocksource.h
index cab9ae9f1..471caf717 100644
--- a/arch/mips/include/asm/clocksource.h
+++ b/arch/mips/include/asm/clocksource.h
@@ -13,6 +13,7 @@
 #define VDSO_CLOCK_NONE		0	/* No suitable clocksource. */
 #define VDSO_CLOCK_R4K		1	/* Use the coprocessor 0 count. */
 #define VDSO_CLOCK_GIC		2	/* Use the GIC. */
+#define VDSO_CLOCK_CONST	3	/* Use the constant timer. */
 
 /**
  * struct arch_clocksource_data - Architecture-specific clocksource information.
diff --git a/arch/mips/include/asm/cpu-features.h b/arch/mips/include/asm/cpu-features.h
index ae4a2f52e..66370283a 100644
--- a/arch/mips/include/asm/cpu-features.h
+++ b/arch/mips/include/asm/cpu-features.h
@@ -635,6 +635,10 @@
 # endif
 #endif
 
+#ifndef cpu_has_constant_timer
+# define cpu_has_constant_timer	__opt(MIPS_CPU_CONST_TIMER)
+#endif
+
 /*
  * Guest capabilities
  */
diff --git a/arch/mips/include/asm/cpu.h b/arch/mips/include/asm/cpu.h
index 81ddb5755..7395413c5 100644
--- a/arch/mips/include/asm/cpu.h
+++ b/arch/mips/include/asm/cpu.h
@@ -415,6 +415,7 @@ enum cpu_type_enum {
 #define MIPS_CPU_MT_PER_TC_PERF_COUNTERS \
 				BIT_ULL(56)	/* CPU has perf counters implemented per TC (MIPSMT ASE) */
 #define MIPS_CPU_MMID		BIT_ULL(57)	/* CPU supports MemoryMapIDs */
+#define MIPS_CPU_CONST_TIMER	BIT_ULL(58)	/* CPU has constant timer */
 
 /*
  * CPU ASE encodings
diff --git a/arch/mips/include/asm/mach-loongson64/loongson_regs.h b/arch/mips/include/asm/mach-loongson64/loongson_regs.h
index 363a47a5d..2975e4c88 100644
--- a/arch/mips/include/asm/mach-loongson64/loongson_regs.h
+++ b/arch/mips/include/asm/mach-loongson64/loongson_regs.h
@@ -110,6 +110,9 @@ static inline u32 read_cpucfg(u32 reg)
 #define LOONGSON_CFG7_GCCAEQRP	BIT(0)
 #define LOONGSON_CFG7_UCAWINP	BIT(1)
 
+#define CSR_TO_RAW_ADDR(cpu, csr) ((0x900000003ff00000 | csr | \
+		(((u64)cpu & 0xc) << 42)) | (((u64)cpu & 0x3) << 8))
+
 static inline bool cpu_has_csr(void)
 {
 	if (cpu_has_cfg())
@@ -208,6 +211,12 @@ static inline void csr_writeq(u64 val, u32 reg)
 #define CSR_IPI_SEND_CPU_SHIFT	16
 #define CSR_IPI_SEND_BLOCK	BIT(31)
 
+#define LOONGSON_CSR_TIMER_CFG	0x1060
+#define LOONGSON_CSR_TIMER_TICK	0x1070
+#define CONSTANT_TIMER_CFG_PERIODIC	(_ULCAST_(1) << 62)
+#define CONSTANT_TIMER_CFG_EN		(_ULCAST_(1) << 61)
+#define CONSTANT_TIMER_INITVAL_RESET	(_ULCAST_(0xffff) << 48)
+
 static inline u64 drdtime(void)
 {
 	int rID = 0;
@@ -224,4 +233,25 @@ static inline u64 drdtime(void)
 	return val;
 }
 
+static inline unsigned int calc_const_freq(void)
+{
+	unsigned int res;
+	unsigned int base_freq;
+	unsigned int cfm, cfd;
+
+	res = read_cpucfg(LOONGSON_CFG2);
+	if (!(res & LOONGSON_CFG2_LLFTP))
+		return 0;
+
+	res = read_cpucfg(LOONGSON_CFG5);
+	cfm = res & 0xffff;
+	cfd = (res >> 16) & 0xffff;
+	base_freq = read_cpucfg(LOONGSON_CFG4);
+
+	if (!base_freq || !cfm || !cfd)
+		return 0;
+	else
+		return (base_freq * cfm / cfd);
+}
+
 #endif
diff --git a/arch/mips/include/asm/mipsregs.h b/arch/mips/include/asm/mipsregs.h
index c28b89293..855a1cc0f 100644
--- a/arch/mips/include/asm/mipsregs.h
+++ b/arch/mips/include/asm/mipsregs.h
@@ -674,6 +674,8 @@
 #define MIPS_CONF5_CV		(_ULCAST_(1) << 29)
 #define MIPS_CONF5_K		(_ULCAST_(1) << 30)
 
+#define MIPS_CONF6_INTIMER	(_ULCAST_(1) << 6)
+#define MIPS_CONF6_EXTIMER	(_ULCAST_(1) << 7)
 #define MIPS_CONF6_SYND		(_ULCAST_(1) << 13)
 /* proAptiv FTLB on/off bit */
 #define MIPS_CONF6_FTLBEN	(_ULCAST_(1) << 15)
diff --git a/arch/mips/include/asm/time.h b/arch/mips/include/asm/time.h
index 3ba2bc06a..8d75c7f2c 100644
--- a/arch/mips/include/asm/time.h
+++ b/arch/mips/include/asm/time.h
@@ -42,11 +42,19 @@ extern int __weak get_c0_perfcount_int(void);
  */
 extern unsigned int get_c0_compare_int(void);
 extern int r4k_clockevent_init(void);
+#ifdef CONFIG_CPU_LOONGSON3
+extern int constant_clockevent_init(void);
+#else
+static inline int constant_clockevent_init(void) { return 0; }
+#endif
 
 static inline int mips_clockevent_init(void)
 {
 #ifdef CONFIG_CEVT_R4K
-	return r4k_clockevent_init();
+	if (!cpu_has_constant_timer)
+		return r4k_clockevent_init();
+	else
+		return constant_clockevent_init();
 #else
 	return -ENXIO;
 #endif
@@ -56,11 +64,19 @@ static inline int mips_clockevent_init(void)
  * Initialize the count register as a clocksource
  */
 extern int init_r4k_clocksource(void);
+#ifdef CONFIG_CPU_LOONGSON3
+extern int init_constant_clocksource(void);
+#else
+static inline int init_constant_clocksource(void) { return 0; }
+#endif
 
 static inline int init_mips_clocksource(void)
 {
 #ifdef CONFIG_CSRC_R4K
-	return init_r4k_clocksource();
+	if (!cpu_has_constant_timer)
+		return init_r4k_clocksource();
+	else
+		return init_constant_clocksource();
 #else
 	return 0;
 #endif
diff --git a/arch/mips/include/asm/vdso/gettimeofday.h b/arch/mips/include/asm/vdso/gettimeofday.h
index 83f1cbbbf..8b494bb6c 100644
--- a/arch/mips/include/asm/vdso/gettimeofday.h
+++ b/arch/mips/include/asm/vdso/gettimeofday.h
@@ -191,6 +191,24 @@ static __always_inline u64 read_gic_count(const struct vdso_data *data)
 
 #endif
 
+#ifdef CONFIG_CPU_LOONGSON3
+
+static __always_inline u64 read_const_count(void)
+{
+	unsigned long count;
+
+	__asm__ __volatile__(
+	"	.set push\n"
+	"	.set mips32r2\n"
+	"	rdhwr	%0, $30\n"
+	"	.set pop\n"
+	: "=r" (count));
+
+	return count;
+}
+
+#endif
+
 static __always_inline u64 __arch_get_hw_counter(s32 clock_mode)
 {
 #ifdef CONFIG_CLKSRC_MIPS_GIC
@@ -208,6 +226,11 @@ static __always_inline u64 __arch_get_hw_counter(s32 clock_mode)
 	case VDSO_CLOCK_GIC:
 		cycle_now = read_gic_count(data);
 		break;
+#endif
+#ifdef CONFIG_CPU_LOONGSON3
+	case VDSO_CLOCK_CONST:
+		cycle_now = read_const_count();
+		break;
 #endif
 	default:
 		cycle_now = __VDSO_USE_SYSCALL;
diff --git a/arch/mips/kernel/cpu-probe.c b/arch/mips/kernel/cpu-probe.c
index c272212c7..c455d7f61 100644
--- a/arch/mips/kernel/cpu-probe.c
+++ b/arch/mips/kernel/cpu-probe.c
@@ -28,6 +28,10 @@
 #include <asm/spram.h>
 #include <linux/uaccess.h>
 
+#ifdef CONFIG_CPU_LOONGSON3
+#include <loongson_regs.h>
+#endif
+
 /* Hardware capabilities */
 unsigned int elf_hwcap __read_mostly;
 EXPORT_SYMBOL_GPL(elf_hwcap);
@@ -1913,6 +1917,17 @@ static inline void cpu_probe_cavium(struct cpuinfo_mips *c, unsigned int cpu)
 	}
 }
 
+static void decode_loongson_cpucfg(struct cpuinfo_mips *c)
+{
+#ifdef CONFIG_CPU_LOONGSON3
+	unsigned int cpucfg;
+
+	cpucfg = read_cpucfg(LOONGSON_CFG2);
+	if (cpucfg & LOONGSON_CFG2_LLFTP)
+		c->options |= MIPS_CPU_CONST_TIMER;
+#endif
+}
+
 static inline void cpu_probe_loongson(struct cpuinfo_mips *c, unsigned int cpu)
 {
 	switch (c->processor_id & PRID_IMP_MASK) {
@@ -1949,6 +1964,7 @@ static inline void cpu_probe_loongson(struct cpuinfo_mips *c, unsigned int cpu)
 		set_isa(c, MIPS_CPU_ISA_M64R2);
 		__cpu_full_name[cpu] = "Loongson-3A R4 (Loongson-3A4000)";
 		decode_configs(c);
+		decode_loongson_cpucfg(c);
 		c->options |= MIPS_CPU_FTLB | MIPS_CPU_TLBINV | MIPS_CPU_LDPTE;
 		c->writecombine = _CACHE_UNCACHED_ACCELERATED;
 		c->ases |= (MIPS_ASE_LOONGSON_MMI | MIPS_ASE_LOONGSON_CAM |
diff --git a/arch/mips/loongson64/loongson-3/Makefile b/arch/mips/loongson64/loongson-3/Makefile
index df3959874..5220e77bd 100644
--- a/arch/mips/loongson64/loongson-3/Makefile
+++ b/arch/mips/loongson64/loongson-3/Makefile
@@ -2,7 +2,7 @@
 #
 # Makefile for Loongson-3 family machines
 #
-obj-y			+= irq.o cop2-ex.o platform.o acpi_init.o dma.o
+obj-y			+= irq.o cop2-ex.o platform.o acpi_init.o dma.o constant_timer.o
 
 obj-$(CONFIG_SMP)	+= smp.o
 
diff --git a/arch/mips/loongson64/loongson-3/constant_timer.c b/arch/mips/loongson64/loongson-3/constant_timer.c
new file mode 100644
index 000000000..25417ae50
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/constant_timer.c
@@ -0,0 +1,256 @@
+#include <linux/init.h>
+#include <linux/clockchips.h>
+#include <linux/sched_clock.h>
+#include <asm/time.h>
+#include <asm/mipsregs.h>
+#include <asm/cevt-r4k.h>
+#include <loongson.h>
+#include <loongson_regs.h>
+
+int constant_timer_irq_installed;
+
+static DEFINE_SPINLOCK(state_lock);
+DEFINE_PER_CPU(struct clock_event_device, constant_clockevent_device);
+
+void constant_event_handler(struct clock_event_device *dev)
+{
+}
+
+irqreturn_t constant_timer_interrupt(int irq, void *data)
+{
+	int cpu = smp_processor_id();
+	const int r2 = cpu_has_mips_r2_r6;
+	struct clock_event_device *cd;
+
+	if ((cp0_perfcount_irq < 0) && perf_irq() == IRQ_HANDLED && !r2)
+		return IRQ_HANDLED;
+
+	/*
+	 * The same applies to performance counter interrupts.	But with the
+	 * above we now know that the reason we got here must be a timer
+	 * interrupt.  Being the paranoiacs we are we check anyway.
+	 */
+	if (!r2 || (read_c0_cause() & CAUSEF_TI)) {
+		/* Clear Count/Compare Interrupt */
+		write_c0_compare(read_c0_compare());
+		cd = &per_cpu(constant_clockevent_device, cpu);
+		cd->event_handler(cd);
+
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
+static struct irqaction constant_timer_irqaction = {
+	.handler = constant_timer_interrupt,
+	.flags = IRQF_PERCPU | IRQF_TIMER | IRQF_SHARED,
+	.name = "timer",
+};
+
+static int constant_set_state_oneshot(struct clock_event_device *evt)
+{
+	unsigned int raw_cpuid;
+	unsigned long cfg, addr;
+
+	spin_lock(&state_lock);
+
+	raw_cpuid = cpu_logical_map(smp_processor_id());
+	addr = CSR_TO_RAW_ADDR(raw_cpuid, LOONGSON_CSR_TIMER_CFG);
+
+	if (!cpu_has_csr())
+		cfg = readq((void *)addr);
+	else
+		cfg = csr_readq(LOONGSON_CSR_TIMER_CFG);
+
+	/* set timer type
+	 * 1 : periodic interrupt
+	 * 0 : non-periodic(oneshot) interrupt
+	 */
+	cfg |= CONSTANT_TIMER_CFG_EN;
+	cfg &= ~CONSTANT_TIMER_CFG_PERIODIC;
+
+	if (!cpu_has_csr())
+		writeq(cfg, (void *)addr);
+	else
+		csr_writeq(cfg, LOONGSON_CSR_TIMER_CFG);
+
+	spin_unlock(&state_lock);
+
+	return 0;
+}
+
+static int constant_set_state_oneshot_stopped(struct clock_event_device *evt)
+{
+	return 0;
+}
+
+static int constant_set_state_periodic(struct clock_event_device *evt)
+{
+	unsigned int period;
+	unsigned int raw_cpuid;
+	unsigned long cfg, addr;
+
+	spin_lock(&state_lock);
+
+	raw_cpuid = cpu_logical_map(smp_processor_id());
+	addr = CSR_TO_RAW_ADDR(raw_cpuid, LOONGSON_CSR_TIMER_CFG);
+
+	if (!cpu_has_csr())
+		cfg = readq((void *)addr);
+	else
+		cfg = csr_readq(LOONGSON_CSR_TIMER_CFG);
+
+	cfg &= CONSTANT_TIMER_INITVAL_RESET;
+	cfg |= (CONSTANT_TIMER_CFG_PERIODIC | CONSTANT_TIMER_CFG_EN);
+
+	period = calc_const_freq();
+	if (!period)
+		period = cpu_clock_freq;
+
+	period = period / HZ;
+
+	if (!cpu_has_csr())
+		writeq(cfg | period, (void *)addr);
+	else
+		csr_writeq(cfg | period, LOONGSON_CSR_TIMER_CFG);
+
+	spin_unlock(&state_lock);
+
+	return 0;
+}
+
+static int constant_set_state_shutdown(struct clock_event_device *evt)
+{
+	return 0;
+}
+
+static int constant_next_event(unsigned long delta,
+				struct clock_event_device *evt)
+{
+	unsigned long addr;
+	unsigned int raw_cpuid;
+
+	raw_cpuid = cpu_logical_map(smp_processor_id());
+	addr = CSR_TO_RAW_ADDR(raw_cpuid, LOONGSON_CSR_TIMER_CFG);
+
+	writeq(delta | CONSTANT_TIMER_CFG_EN, (void *)addr);
+
+	return 0;
+}
+
+static int csr_constant_next_event(unsigned long delta,
+				struct clock_event_device *evt)
+{
+	csr_writeq(delta | CONSTANT_TIMER_CFG_EN, LOONGSON_CSR_TIMER_CFG);
+	return 0;
+}
+
+int constant_clockevent_init(void)
+{
+	unsigned int irq;
+	unsigned int config;
+	unsigned int const_freq;
+	unsigned long min_delta = 0x600;
+	unsigned long max_delta = (1UL << 48) - 1;
+	unsigned int cpu = smp_processor_id();
+	struct clock_event_device *cd;
+
+	config = read_c0_config6();
+	config |= MIPS_CONF6_EXTIMER;
+	write_c0_config6(config);
+
+	const_freq = calc_const_freq();
+	if (!const_freq)
+		const_freq = cpu_clock_freq;
+
+	irq = get_c0_compare_int();
+
+	cd = &per_cpu(constant_clockevent_device, cpu);
+
+	cd->name = "Constant";
+	cd->features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_PERIODIC |
+		       CLOCK_EVT_FEAT_PERCPU;
+
+	cd->rating = 320;
+	cd->irq = irq;
+	cd->cpumask = cpumask_of(cpu);
+	cd->set_state_oneshot = constant_set_state_oneshot;
+	cd->set_state_oneshot_stopped = constant_set_state_oneshot_stopped;
+	cd->set_state_periodic = constant_set_state_periodic;
+	cd->set_state_shutdown = constant_set_state_shutdown;
+	if (!cpu_has_csr())
+		cd->set_next_event = constant_next_event;
+	else
+		cd->set_next_event = csr_constant_next_event;
+
+	cd->event_handler = constant_event_handler;
+
+	clockevents_config_and_register(cd, const_freq, min_delta, max_delta);
+
+	if (constant_timer_irq_installed)
+		return 0;
+
+	constant_timer_irq_installed = 1;
+	setup_irq(irq, &constant_timer_irqaction);
+
+	return 0;
+}
+
+static u64 read_const_counter(struct clocksource *clk)
+{
+	u64 count;
+
+	__asm__ __volatile__(
+		" .set push\n"
+		" .set mips32r2\n"
+		" rdhwr   %0, $30\n"
+		" .set pop\n"
+		: "=r" (count));
+
+	return count;
+}
+
+static struct clocksource clocksource_const = {
+	.name = "Constant",
+	.rating = 400,
+	.read = read_const_counter,
+	.mask = CLOCKSOURCE_MASK(64),
+	.flags = CLOCK_SOURCE_IS_CONTINUOUS,
+	.mult = 0,
+	.shift = 10,
+};
+
+static u64 read_sched_clock(void)
+{
+	u64 count;
+
+	__asm__ __volatile__(
+		" .set push\n"
+		" .set mips32r2\n"
+		" rdhwr   %0, $30\n"
+		" .set pop\n"
+		: "=r" (count));
+
+	return count;
+}
+
+int __init init_constant_clocksource(void)
+{
+	int res;
+	unsigned long freq;
+
+	freq = calc_const_freq();
+	if (freq)
+		freq = cpu_clock_freq;
+
+	clocksource_const.mult =
+		clocksource_hz2mult(freq, clocksource_const.shift);
+
+	res = clocksource_register_hz(&clocksource_const, freq);
+
+	sched_clock_register(read_sched_clock, 64, freq);
+	clocksource_const.archdata.vdso_clock_mode = VDSO_CLOCK_CONST;
+
+	return res;
+}
diff --git a/arch/mips/loongson64/loongson-3/smp.c b/arch/mips/loongson64/loongson-3/smp.c
index ef6b83cc1..80980eb8e 100644
--- a/arch/mips/loongson64/loongson-3/smp.c
+++ b/arch/mips/loongson64/loongson-3/smp.c
@@ -368,22 +368,24 @@ static void loongson3_init_secondary(void)
 	cpu_data[cpu].package =
 		cpu_logical_map(cpu) / loongson_sysconf.cores_per_package;
 
-	i = 0;
-	core0_c0count[cpu] = 0;
-	loongson3_send_ipi_single(0, SMP_ASK_C0COUNT);
-	while (!core0_c0count[cpu]) {
-		i++;
-		cpu_relax();
-	}
+	if (!cpu_has_constant_timer) {
+		i = 0;
+		core0_c0count[cpu] = 0;
+		loongson3_send_ipi_single(0, SMP_ASK_C0COUNT);
+		while (!core0_c0count[cpu]) {
+			i++;
+			cpu_relax();
+		}
 
-	if (i > MAX_LOOPS)
-		i = MAX_LOOPS;
-	if (cpu_data[cpu].package)
-		initcount = core0_c0count[cpu] + i;
-	else /* Local access is faster for loops */
-		initcount = core0_c0count[cpu] + i/2;
+		if (i > MAX_LOOPS)
+			i = MAX_LOOPS;
+		if (cpu_data[cpu].package)
+			initcount = core0_c0count[cpu] + i;
+		else /* Local access is faster for loops */
+			initcount = core0_c0count[cpu] + i/2;
 
-	write_c0_count(initcount);
+		write_c0_count(initcount);
+	}
 	__cpu_full_name[cpu] = cpu_full_name;
 }
 
@@ -391,7 +393,9 @@ static void loongson3_smp_finish(void)
 {
 	int cpu = smp_processor_id();
 
-	write_c0_compare(read_c0_count() + mips_hpt_frequency/HZ);
+	if (!cpu_has_constant_timer)
+		write_c0_compare(read_c0_count() + mips_hpt_frequency/HZ);
+
 	local_irq_enable();
 	loongson3_ipi_write64(0,
 			ipi_mailbox_buf[cpu_logical_map(cpu)] + 0x0);
-- 
2.39.1

