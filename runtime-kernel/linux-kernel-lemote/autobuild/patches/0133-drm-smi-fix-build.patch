From c8ebcc2cf298a1ca92b8f8af2d75dce27f89093b Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 15 Sep 2022 18:28:17 +0800
Subject: [PATCH 133/136] drm: smi: fix build

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 drivers/gpu/drm/smi/ddk750/ddk750_2d.c      | 32 ++++++++---------
 drivers/gpu/drm/smi/ddk750/ddk750_chip.c    |  2 +-
 drivers/gpu/drm/smi/ddk750/ddk750_clock.c   | 14 ++++----
 drivers/gpu/drm/smi/ddk750/ddk750_defs.h    |  2 +-
 drivers/gpu/drm/smi/ddk750/ddk750_display.c | 38 ++++++++++----------
 drivers/gpu/drm/smi/ddk750/ddk750_hwi2c.c   |  2 +-
 drivers/gpu/drm/smi/ddk750/ddk750_mode.c    |  4 +--
 drivers/gpu/drm/smi/ddk750/ddk750_power.c   |  6 ++--
 drivers/gpu/drm/smi/ddk768/ddk768_2d.c      |  6 ++--
 drivers/gpu/drm/smi/ddk768/ddk768_chip.c    |  2 +-
 drivers/gpu/drm/smi/ddk768/ddk768_display.c | 16 ++++-----
 drivers/gpu/drm/smi/ddk768/ddk768_hdmi.c    |  4 +--
 drivers/gpu/drm/smi/ddk768/ddk768_hwi2c.c   |  2 +-
 drivers/gpu/drm/smi/ddk768/ddk768_iis.c     |  6 ++--
 drivers/gpu/drm/smi/ddk768/ddk768_mode.c    |  4 +--
 drivers/gpu/drm/smi/ddk768/ddk768_reg.h     |  2 +-
 drivers/gpu/drm/smi/ddk768/ddk768_timer.c   | 12 +++----
 drivers/gpu/drm/smi/ddk768/ddk768_video.c   | 40 ++++++++++-----------
 drivers/gpu/drm/smi/hw750.c                 |  8 ++---
 drivers/gpu/drm/smi/hw768.c                 | 10 +++---
 drivers/gpu/drm/smi/smi_ttm.c               |  2 +-
 21 files changed, 107 insertions(+), 107 deletions(-)

diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_2d.c b/drivers/gpu/drm/smi/ddk750/ddk750_2d.c
index 7bdbebec4..d3616864e 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_2d.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_2d.c
@@ -115,10 +115,10 @@ long deWaitForNotBusy(void)
     	while (i--)
     	{
     	    dwVal = PEEK_32(SYSTEM_CTRL);
-    	    if ((FIELD_GET(dwVal, SYSTEM_CTRL, DE_STATUS)      == SYSTEM_CTRL_DE_STATUS_IDLE) &&
-    	        (FIELD_GET(dwVal, SYSTEM_CTRL, DE_FIFO)        == SYSTEM_CTRL_DE_FIFO_EMPTY) &&
-    	        (FIELD_GET(dwVal, SYSTEM_CTRL, CSC_STATUS)     == SYSTEM_CTRL_CSC_STATUS_IDLE) &&
-    	        (FIELD_GET(dwVal, SYSTEM_CTRL, DE_MEM_FIFO)    == SYSTEM_CTRL_DE_MEM_FIFO_EMPTY))
+    	    if ((DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_STATUS)      == SYSTEM_CTRL_DE_STATUS_IDLE) &&
+    	        (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_FIFO)        == SYSTEM_CTRL_DE_FIFO_EMPTY) &&
+    	        (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, CSC_STATUS)     == SYSTEM_CTRL_CSC_STATUS_IDLE) &&
+    	        (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_MEM_FIFO)    == SYSTEM_CTRL_DE_MEM_FIFO_EMPTY))
     	    {
     	        return 0; /* Return because engine idle */
     	    }
@@ -131,9 +131,9 @@ long deWaitForNotBusy(void)
         while (i--)
         {
             dwVal = PEEK_32(DE_STATE2);
-            if ((FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) &&
-                (FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
-                (FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
+            if ((DDK750_FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) &&
+                (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
+                (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
             {
                 return 0; /* Return because engine idle */
 			}
@@ -167,7 +167,7 @@ long deWaitIdle(unsigned long i)
 		while (i--)
 		{
 			dwVal = PEEK_32(DE_CONTROL);
-			if (FIELD_GET(dwVal, DE_CONTROL, STATUS) == DE_CONTROL_STATUS_STOP)
+			if (DDK750_FIELD_GET(dwVal, DE_CONTROL, STATUS) == DE_CONTROL_STATUS_STOP)
 				return 0;
 		}
 		return -1;
@@ -175,9 +175,9 @@ long deWaitIdle(unsigned long i)
         while (i--)
         {
             dwVal = PEEK_32(DE_STATE2);
-            if ((FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) && 
-                (FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
-                (FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
+            if ((DDK750_FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) && 
+                (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
+                (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
             {
                 return 0; /* Return because engine idle */
             }
@@ -190,10 +190,10 @@ long deWaitIdle(unsigned long i)
     while (i--)
     {
         dwVal = PEEK_32(SYSTEM_CTRL);
-        if ((FIELD_GET(dwVal, SYSTEM_CTRL, DE_STATUS)      == SYSTEM_CTRL_DE_STATUS_IDLE) &&
-            (FIELD_GET(dwVal, SYSTEM_CTRL, DE_FIFO)        == SYSTEM_CTRL_DE_FIFO_EMPTY) &&
-            (FIELD_GET(dwVal, SYSTEM_CTRL, CSC_STATUS)     == SYSTEM_CTRL_CSC_STATUS_IDLE) &&
-            (FIELD_GET(dwVal, SYSTEM_CTRL, DE_MEM_FIFO)    == SYSTEM_CTRL_DE_MEM_FIFO_EMPTY))
+        if ((DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_STATUS)      == SYSTEM_CTRL_DE_STATUS_IDLE) &&
+            (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_FIFO)        == SYSTEM_CTRL_DE_FIFO_EMPTY) &&
+            (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, CSC_STATUS)     == SYSTEM_CTRL_CSC_STATUS_IDLE) &&
+            (DDK750_FIELD_GET(dwVal, SYSTEM_CTRL, DE_MEM_FIFO)    == SYSTEM_CTRL_DE_MEM_FIFO_EMPTY))
         {
             return 0; /* Return because engine idle */
         }
@@ -2582,7 +2582,7 @@ long deNextLineStrip(
     
     de_ctrl = PEEK_32(DE_CONTROL);
     
-    if (FIELD_GET(de_ctrl, DE_CONTROL, MAJOR) == DE_CONTROL_MAJOR_X)
+    if (DDK750_FIELD_GET(de_ctrl, DE_CONTROL, MAJOR) == DE_CONTROL_MAJOR_X)
     {
         /* Set the line length and width */
         POKE_32(DE_DIMENSION,
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_chip.c b/drivers/gpu/drm/smi/ddk750/ddk750_chip.c
index 0d5ddf1b8..f67db2db9 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_chip.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_chip.c
@@ -53,7 +53,7 @@ unsigned long ddk750_getFrameBufSize(void)
 {
     unsigned long sizeSymbol, memSize;
 
-	sizeSymbol = FIELD_GET(peekRegisterDWord(MISC_CTRL), MISC_CTRL, LOCALMEM_SIZE);
+	sizeSymbol = DDK750_FIELD_GET(peekRegisterDWord(MISC_CTRL), MISC_CTRL, LOCALMEM_SIZE);
 	switch(sizeSymbol)
 	{
     	case MISC_CTRL_LOCALMEM_SIZE_8M:  memSize = MB(8);  break; /* 8  Mega byte */
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_clock.c b/drivers/gpu/drm/smi/ddk750/ddk750_clock.c
index 565af8b37..c6ede6692 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_clock.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_clock.c
@@ -213,10 +213,10 @@ unsigned long getPllValue(clock_type_t clockType, pll_value_t *pPLL)
             break;
     }
     
-    pPLL->M = FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, M);
-    pPLL->N = FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, N);
-    pPLL->OD = FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, OD);
-    pPLL->POD = FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, POD);    
+    pPLL->M = DDK750_FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, M);
+    pPLL->N = DDK750_FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, N);
+    pPLL->OD = DDK750_FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, OD);
+    pPLL->POD = DDK750_FIELD_GET(ulPllReg, PRIMARY_PLL_CTRL, POD);    
 
     return calcPLL(pPLL);
 }
@@ -427,7 +427,7 @@ unsigned long getMasterClock()
     
     /* Get the divisor */
     value = peekRegisterDWord(CURRENT_GATE);
-    switch (FIELD_GET(value, CURRENT_GATE, MCLK))
+    switch (DDK750_FIELD_GET(value, CURRENT_GATE, MCLK))
     {
         case CURRENT_GATE_MCLK_DIV_3:
             divisor = 3;
@@ -465,7 +465,7 @@ unsigned long getMemoryClock()
     
     /* Get the divisor */
     value = peekRegisterDWord(CURRENT_GATE);
-    switch (FIELD_GET(value, CURRENT_GATE, M2XCLK))
+    switch (DDK750_FIELD_GET(value, CURRENT_GATE, M2XCLK))
     {
         case CURRENT_GATE_M2XCLK_DIV_1:
             divisor = 1;
@@ -542,7 +542,7 @@ void waitMasterClock(
     while (totalClockCount > 0)
     {
         startCount = endCount;
-        value = FIELD_GET(peekRegisterDWord(PLL_CLK_COUNT), PLL_CLK_COUNT, COUNTER);
+        value = DDK750_FIELD_GET(peekRegisterDWord(PLL_CLK_COUNT), PLL_CLK_COUNT, COUNTER);
         endCount = value;
         
         /* Check if the counter has overflown */
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_defs.h b/drivers/gpu/drm/smi/ddk750/ddk750_defs.h
index 78a12f069..e1da0277f 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_defs.h
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_defs.h
@@ -34,7 +34,7 @@
 #define _F_DENORMALIZE(v, f)    (((v) << _F_START(f)) & _F_MASK(f))
 
 /* Global macros */
-#define FIELD_GET(x, reg, field) \
+#define DDK750_FIELD_GET(x, reg, field) \
 ( \
     _F_NORMALIZE((x), reg ## _ ## field) \
 )
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_display.c b/drivers/gpu/drm/smi/ddk750/ddk750_display.c
index 92c7a1256..54e812942 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_display.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_display.c
@@ -38,7 +38,7 @@ unsigned char isDualPanelEnable(void)
 {
     unsigned long value;
 
-    value = FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, DUAL_DISPLAY);
+    value = DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, DUAL_DISPLAY);
     
     return ((value == PRIMARY_DISPLAY_CTRL_DUAL_DISPLAY_ENABLE) ? 1 : 0);
 }
@@ -51,7 +51,7 @@ unsigned char isDualPanelEnable(void)
  */
 panel_type_t getPanelType(void)
 {
-    if (FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, DOUBLE_PIXEL) == 
+    if (DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, DOUBLE_PIXEL) == 
         PRIMARY_DISPLAY_CTRL_DOUBLE_PIXEL_ENABLE)
     {
         return TFT_36BIT;
@@ -120,9 +120,9 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
     {
         /* Do not wait when the Primary PLL is off or display control is already off. 
            This will prevent the software to wait forever. */
-        if ((FIELD_GET(peekRegisterDWord(PRIMARY_PLL_CTRL), PRIMARY_PLL_CTRL, POWER) ==
+        if ((DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_PLL_CTRL), PRIMARY_PLL_CTRL, POWER) ==
              PRIMARY_PLL_CTRL_POWER_OFF) ||
-            (FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, TIMING) ==
+            (DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_DISPLAY_CTRL), PRIMARY_DISPLAY_CTRL, TIMING) ==
              PRIMARY_DISPLAY_CTRL_TIMING_DISABLE))
         {
             return;
@@ -134,7 +134,7 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
             /* Wait for end of vsync. */
             do
             {
-                status = FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
+                status = DDK750_FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
                                    SYSTEM_CTRL,
                                    PRIMARY_VSYNC);
                 if(ulLoopCount++ > ulDeadLoopCount)
@@ -146,7 +146,7 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
             /* Wait for start of vsync. */
             do
             {
-                status = FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
+                status = DDK750_FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
                                    SYSTEM_CTRL, 
                                    PRIMARY_VSYNC);
                 if(ulLoopCount++ > ulDeadLoopCount)
@@ -159,9 +159,9 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
     {
         /* Do not wait when the display control is already off. This will prevent
            the software to wait forever. */
-        if ((FIELD_GET(peekRegisterDWord(SECONDARY_PLL_CTRL), SECONDARY_PLL_CTRL, POWER) ==
+        if ((DDK750_FIELD_GET(peekRegisterDWord(SECONDARY_PLL_CTRL), SECONDARY_PLL_CTRL, POWER) ==
              SECONDARY_PLL_CTRL_POWER_OFF) ||
-            (FIELD_GET(peekRegisterDWord(SECONDARY_DISPLAY_CTRL), SECONDARY_DISPLAY_CTRL, TIMING) ==
+            (DDK750_FIELD_GET(peekRegisterDWord(SECONDARY_DISPLAY_CTRL), SECONDARY_DISPLAY_CTRL, TIMING) ==
              SECONDARY_DISPLAY_CTRL_TIMING_DISABLE))
         {
             return;
@@ -173,7 +173,7 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
             /* Wait for end of vsync. */
             do
             {
-                status = FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
+                status = DDK750_FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
                                    SYSTEM_CTRL,
                                    SECONDARY_VSYNC);
                 if(ulLoopCount++ > ulDeadLoopCount)
@@ -185,7 +185,7 @@ void waitNextVerticalSync(disp_control_t dispControl, unsigned long vsync_count)
             /* Wait for start of vsync. */
             do
             {
-                status = FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
+                status = DDK750_FIELD_GET(peekRegisterDWord(SYSTEM_CTRL),
                                    SYSTEM_CTRL, 
                                    SECONDARY_VSYNC);
                 if(ulLoopCount++ > ulDeadLoopCount)
@@ -233,9 +233,9 @@ void waitVSyncLine(disp_control_t dispControl)
     do
     {
         if (dispControl == PRIMARY_CTRL)
-            value = FIELD_GET(peekRegisterDWord(PRIMARY_CURRENT_LINE), PRIMARY_CURRENT_LINE, LINE);
+            value = DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_CURRENT_LINE), PRIMARY_CURRENT_LINE, LINE);
         else
-            value = FIELD_GET(peekRegisterDWord(SECONDARY_CURRENT_LINE), SECONDARY_CURRENT_LINE, LINE);
+            value = DDK750_FIELD_GET(peekRegisterDWord(SECONDARY_CURRENT_LINE), SECONDARY_CURRENT_LINE, LINE);
     }
     while (value < modeParam.vertical_sync_start);
 }
@@ -624,13 +624,13 @@ void getCRTDetectThreshold(
     value = peekRegisterDWord(SECONDARY_MONITOR_DETECT);
 
     if (pRedValue != (unsigned char *)0)
-        *pRedValue = (unsigned char)FIELD_GET(value, SECONDARY_MONITOR_DETECT, RED);
+        *pRedValue = (unsigned char)DDK750_FIELD_GET(value, SECONDARY_MONITOR_DETECT, RED);
         
     if (pGreenValue != (unsigned char *)0)
-        *pGreenValue = (unsigned char)FIELD_GET(value, SECONDARY_MONITOR_DETECT, GREEN);
+        *pGreenValue = (unsigned char)DDK750_FIELD_GET(value, SECONDARY_MONITOR_DETECT, GREEN);
         
     if (pBlueValue != (unsigned char *)0)
-        *pBlueValue = (unsigned char)FIELD_GET(value, SECONDARY_MONITOR_DETECT, BLUE);
+        *pBlueValue = (unsigned char)DDK750_FIELD_GET(value, SECONDARY_MONITOR_DETECT, BLUE);
 }
 
 /*
@@ -683,7 +683,7 @@ long ddk750_detectCRTMonitor(
     while (value--);
     
     /* Check if the monitor is detected. */
-    if (FIELD_GET(peekRegisterDWord(SECONDARY_MONITOR_DETECT), SECONDARY_MONITOR_DETECT, VALUE) ==
+    if (DDK750_FIELD_GET(peekRegisterDWord(SECONDARY_MONITOR_DETECT), SECONDARY_MONITOR_DETECT, VALUE) ==
         SECONDARY_MONITOR_DETECT_VALUE_ENABLE)
     {
         result = 0;
@@ -1691,14 +1691,14 @@ unsigned char isScalingEnabled(
     if (dispCtrl == PRIMARY_CTRL)
     {
         value = peekRegisterDWord(SECONDARY_DISPLAY_CTRL);
-        if (FIELD_GET(value, SECONDARY_DISPLAY_CTRL, EXPANSION) == SECONDARY_DISPLAY_CTRL_EXPANSION_ENABLE)
+        if (DDK750_FIELD_GET(value, SECONDARY_DISPLAY_CTRL, EXPANSION) == SECONDARY_DISPLAY_CTRL_EXPANSION_ENABLE)
             return 1;
     }
     else
     {
         value = peekRegisterDWord(SECONDARY_SCALE);
-        if ((FIELD_GET(value, SECONDARY_SCALE, VERTICAL_SCALE) != 0) ||
-            (FIELD_GET(value, SECONDARY_SCALE, HORIZONTAL_SCALE) != 0))
+        if ((DDK750_FIELD_GET(value, SECONDARY_SCALE, VERTICAL_SCALE) != 0) ||
+            (DDK750_FIELD_GET(value, SECONDARY_SCALE, HORIZONTAL_SCALE) != 0))
             return 1;
     }
     
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_hwi2c.c b/drivers/gpu/drm/smi/ddk750/ddk750_hwi2c.c
index 7478c61da..c87ce0484 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_hwi2c.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_hwi2c.c
@@ -95,7 +95,7 @@ static long hwI2CWaitTXDone(void)
 
     /* Wait until the transfer is completed. */
     timeout = HWI2C_WAIT_TIMEOUT;
-	while ((FIELD_GET(peekRegisterByte(I2C_STATUS), I2C_STATUS, TX) != I2C_STATUS_TX_COMPLETED) &&
+	while ((DDK750_FIELD_GET(peekRegisterByte(I2C_STATUS), I2C_STATUS, TX) != I2C_STATUS_TX_COMPLETED) &&
            (timeout != 0))
 		timeout--;
     
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_mode.c b/drivers/gpu/drm/smi/ddk750/ddk750_mode.c
index 7484424c4..9fcfc2617 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_mode.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_mode.c
@@ -396,12 +396,12 @@ long isCurrentDisplayPending(
     /* Get the display status */
     if (dispControl == PRIMARY_CTRL)
     {
-        if (FIELD_GET(peekRegisterDWord(PRIMARY_FB_ADDRESS), PRIMARY_FB_ADDRESS, STATUS) == PRIMARY_FB_ADDRESS_STATUS_PENDING)
+        if (DDK750_FIELD_GET(peekRegisterDWord(PRIMARY_FB_ADDRESS), PRIMARY_FB_ADDRESS, STATUS) == PRIMARY_FB_ADDRESS_STATUS_PENDING)
             return 0;
     }
 	else if (dispControl == SECONDARY_CTRL)
     {
-        if (FIELD_GET(peekRegisterDWord(SECONDARY_FB_ADDRESS), SECONDARY_FB_ADDRESS, STATUS) == SECONDARY_FB_ADDRESS_STATUS_PENDING)
+        if (DDK750_FIELD_GET(peekRegisterDWord(SECONDARY_FB_ADDRESS), SECONDARY_FB_ADDRESS, STATUS) == SECONDARY_FB_ADDRESS_STATUS_PENDING)
             return 0;
     }
 
diff --git a/drivers/gpu/drm/smi/ddk750/ddk750_power.c b/drivers/gpu/drm/smi/ddk750/ddk750_power.c
index 552e32fdc..c6de95886 100644
--- a/drivers/gpu/drm/smi/ddk750/ddk750_power.c
+++ b/drivers/gpu/drm/smi/ddk750/ddk750_power.c
@@ -85,7 +85,7 @@ void setDPMS(DPMS_t state)
 unsigned long getPowerMode()
 {
 
-    return (FIELD_GET(peekRegisterDWord(POWER_MODE_CTRL), POWER_MODE_CTRL, MODE));
+    return (DDK750_FIELD_GET(peekRegisterDWord(POWER_MODE_CTRL), POWER_MODE_CTRL, MODE));
 }
 
 /*
@@ -99,7 +99,7 @@ void setPowerMode(unsigned long powerMode)
     /* Get the current power mode ctrl register value and save it 
        before switching the power mode. */
     control_value = peekRegisterDWord(POWER_MODE_CTRL);
-    previousPowerState = FIELD_GET(control_value, POWER_MODE_CTRL, MODE);
+    previousPowerState = DDK750_FIELD_GET(control_value, POWER_MODE_CTRL, MODE);
 
     /* Set the power mode to the requested power mode. */
     switch (powerMode)
@@ -135,7 +135,7 @@ void setPowerMode(unsigned long powerMode)
     
     /* In SM718, the chip needs to wait until wake up from the sleep mode and wait for
        a few milliseconds before reseting the memory and resume the normal operation. */
-    if ((powerMode != 2) && (previousPowerState != FIELD_GET(control_value, POWER_MODE_CTRL, MODE)))
+    if ((powerMode != 2) && (previousPowerState != DDK750_FIELD_GET(control_value, POWER_MODE_CTRL, MODE)))
     {
         /* Switching power mode between power mode 0 and 1 */
         
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_2d.c b/drivers/gpu/drm/smi/ddk768/ddk768_2d.c
index 8cd66717e..412b4cd6e 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_2d.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_2d.c
@@ -120,9 +120,9 @@ long ddk768_deWaitForNotBusy(void)
     while (i--)
     {
         dwVal = PEEK_32(DE_STATE2);
-        if ((FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) &&
-            (FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
-            (FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
+        if ((DDK750_FIELD_GET(dwVal, DE_STATE2, DE_STATUS)      == DE_STATE2_DE_STATUS_IDLE) &&
+            (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_FIFO)        == DE_STATE2_DE_FIFO_EMPTY) &&
+            (DDK750_FIELD_GET(dwVal, DE_STATE2, DE_MEM_FIFO)    == DE_STATE2_DE_MEM_FIFO_EMPTY))
         {
             return 0; /* Return because engine idle */
         }
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_chip.c b/drivers/gpu/drm/smi/ddk768/ddk768_chip.c
index 1338a47cb..03abf8d2b 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_chip.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_chip.c
@@ -28,7 +28,7 @@ unsigned long ddk768_getFrameBufSize()
 	return SMI_MEMORY_SIZE_SM768;
     unsigned long strapPin, ddrController, rValue;
 
-    strapPin = FIELD_GET(peekRegisterDWord(STRAP_PINS), STRAP_PINS, MEM_SIZE);
+    strapPin = DDK750_FIELD_GET(peekRegisterDWord(STRAP_PINS), STRAP_PINS, MEM_SIZE);
     ddrController = peekRegisterDWord(DDR_CONTROL);
 
     switch(strapPin)
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_display.c b/drivers/gpu/drm/smi/ddk768/ddk768_display.c
index 946bbe873..70e7af292 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_display.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_display.c
@@ -154,7 +154,7 @@ void waitDispVerticalSync(disp_control_t dispControl, unsigned long vSyncCount)
     if (dispControl == CHANNEL0_CTRL)
     {
         // There is no Vsync when PLL is off
-        if ((FIELD_GET(peekRegisterDWord(CLOCK_ENABLE), CLOCK_ENABLE, DC0) == CLOCK_ENABLE_DC0_OFF))
+        if ((DDK750_FIELD_GET(peekRegisterDWord(CLOCK_ENABLE), CLOCK_ENABLE, DC0) == CLOCK_ENABLE_DC0_OFF))
             return;
 
         ulDispCtrlAddr = DISPLAY_CTRL;
@@ -162,14 +162,14 @@ void waitDispVerticalSync(disp_control_t dispControl, unsigned long vSyncCount)
     else
     {
         // There is no Vsync when PLL is off
-        if ((FIELD_GET(peekRegisterDWord(CLOCK_ENABLE), CLOCK_ENABLE, DC1) == CLOCK_ENABLE_DC1_OFF))
+        if ((DDK750_FIELD_GET(peekRegisterDWord(CLOCK_ENABLE), CLOCK_ENABLE, DC1) == CLOCK_ENABLE_DC1_OFF))
             return;
 
         ulDispCtrlAddr = DISPLAY_CTRL+CHANNEL_OFFSET;
     }
 
     //There is no Vsync when display timing is off. 
-    if ((FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, TIMING) ==
+    if ((DDK750_FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, TIMING) ==
          DISPLAY_CTRL_TIMING_DISABLE))
     {
             return;
@@ -184,7 +184,7 @@ void waitDispVerticalSync(disp_control_t dispControl, unsigned long vSyncCount)
         ulLoopCount = 0;
         do
         {
-            status = FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, VSYNC);
+            status = DDK750_FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, VSYNC);
             //Insert delay to reduce number of Vsync checks
             timerWaitTicks(3, 0xffff);
             if(ulLoopCount++ > ulDeadLoopCount) break;
@@ -195,7 +195,7 @@ void waitDispVerticalSync(disp_control_t dispControl, unsigned long vSyncCount)
         ulLoopCount = 0;
         do
         {
-            status = FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, VSYNC);
+            status = DDK750_FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), DISPLAY_CTRL, VSYNC);
             timerWaitTicks(3, 0xffff);
             if(ulLoopCount++ > ulDeadLoopCount) break;
         }
@@ -224,7 +224,7 @@ void ddk768_waitVSyncLine(disp_control_t dispControl)
     
     do
     {
-    	value = FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), CURRENT_LINE, LINE);
+    	value = DDK750_FIELD_GET(peekRegisterDWord(ulDispCtrlAddr), CURRENT_LINE, LINE);
     }
     while (value < modeParam.vertical_sync_start);
 }
@@ -238,7 +238,7 @@ unsigned long getDisplayLine(disp_control_t dispControl)
     unsigned long ulRegValue;
     
     ulRegAddr = (dispControl == CHANNEL0_CTRL)? CURRENT_LINE : (CURRENT_LINE+DC_OFFSET);
-    ulRegValue = FIELD_GET(peekRegisterDWord(ulRegAddr), CURRENT_LINE, LINE);
+    ulRegValue = DDK750_FIELD_GET(peekRegisterDWord(ulRegAddr), CURRENT_LINE, LINE);
 
     return(ulRegValue);
 }
@@ -476,7 +476,7 @@ long ddk768_detectCRTMonitor(
     timerWaitTicks(3, 0x7ffff);
     
     /* Check if the monitor is detected. */
-    if (FIELD_GET(peekRegisterDWord(ulMonitorDetectAddr), CRT_DETECT, CRT) ==
+    if (DDK750_FIELD_GET(peekRegisterDWord(ulMonitorDetectAddr), CRT_DETECT, CRT) ==
         CRT_DETECT_CRT_PRESENT)
     {
         result = 0;
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_hdmi.c b/drivers/gpu/drm/smi/ddk768/ddk768_hdmi.c
index 4f9c62f4c..68c955ec4 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_hdmi.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_hdmi.c
@@ -100,7 +100,7 @@ void hdmiISR(
 {
     hdmi_interrupt_t *pfnHandler;
 
-    if (FIELD_GET(status, INT_STATUS, HDMI) == INT_STATUS_HDMI_ACTIVE)
+    if (DDK750_FIELD_GET(status, INT_STATUS, HDMI) == INT_STATUS_HDMI_ACTIVE)
     {
         /* Walk all registered handlers for handlers that support this interrupt status */
         for (pfnHandler = g_pHdmiIntHandlers; pfnHandler != ((hdmi_interrupt_t *)0); pfnHandler = pfnHandler->next)
@@ -1322,7 +1322,7 @@ int hdmi_detect(void)
 
     intStatus = peekRegisterDWord(INT_STATUS);
 	
-    if (FIELD_GET(intStatus, INT_STATUS, HDMI) == INT_STATUS_HDMI_ACTIVE)
+    if (DDK750_FIELD_GET(intStatus, INT_STATUS, HDMI) == INT_STATUS_HDMI_ACTIVE)
     {
         
 
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_hwi2c.c b/drivers/gpu/drm/smi/ddk768/ddk768_hwi2c.c
index 167639ada..e03fba648 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_hwi2c.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_hwi2c.c
@@ -95,7 +95,7 @@ long ddk768_hwI2CWaitTXDone(
 
     /* Wait until the transfer is completed. */
     timeout = HWI2C_WAIT_TIMEOUT;
-    while ((FIELD_GET(peekRegisterByte(I2C_STATUS+offset), I2C_STATUS, TX) != I2C_STATUS_TX_COMPLETED) &&
+    while ((DDK750_FIELD_GET(peekRegisterByte(I2C_STATUS+offset), I2C_STATUS, TX) != I2C_STATUS_TX_COMPLETED) &&
            (timeout != 0))
         timeout--;
     
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_iis.c b/drivers/gpu/drm/smi/ddk768/ddk768_iis.c
index 40399d275..2e0cd41d2 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_iis.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_iis.c
@@ -112,7 +112,7 @@ void iisTxDmaSetup(
     len >>= 2;
     len--; //I2S DMA register requires length to be expressed as DWord - 1.
 
-    dmaPointer = FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS);
+    dmaPointer = DDK750_FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS);
 
     //If DMA pointer already at the requested offset. Just set up the length.
     if (dmaPointer == offset)
@@ -144,7 +144,7 @@ void iisTxDmaSetup(
     // When DMA get to the end of SRAM, it loads the new base pointer.
     do
     {
-      dmaPointer = FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS);
+      dmaPointer = DDK750_FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS);
     } while(dmaPointer != offset);
 
     iisStop();
@@ -155,7 +155,7 @@ void iisTxDmaSetup(
  */
 unsigned long iisDmaPointer(void)
 {
-    return(FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS));
+    return(DDK750_FIELD_GET(peekRegisterDWord(I2S_SRAM_DMA), I2S_SRAM_DMA, ADDRESS));
 }
 
 /*
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_mode.c b/drivers/gpu/drm/smi/ddk768/ddk768_mode.c
index 63f0f3712..41ec4b9d9 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_mode.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_mode.c
@@ -613,7 +613,7 @@ long isDisplayBasePending(
 
     regFB = (dispControl == CHANNEL0_CTRL) ? FB_ADDRESS : (FB_ADDRESS+CHANNEL_OFFSET);
 
-    if (FIELD_GET(peekRegisterDWord(regFB), FB_ADDRESS, STATUS) == FB_ADDRESS_STATUS_PENDING)
+    if (DDK750_FIELD_GET(peekRegisterDWord(regFB), FB_ADDRESS, STATUS) == FB_ADDRESS_STATUS_PENDING)
         return 1;
 
     return (0);
@@ -684,7 +684,7 @@ pll_value_t *pPLL               /* Pre-calculated values for the PLL */
 
 
     
-    unsigned long hdmi_channel = FIELD_GET(peekRegisterDWord(DISPLAY_CTRL+offset),
+    unsigned long hdmi_channel = DDK750_FIELD_GET(peekRegisterDWord(DISPLAY_CTRL+offset),
                                    DISPLAY_CTRL,
                                    HDMI_SELECT);    
 
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_reg.h b/drivers/gpu/drm/smi/ddk768/ddk768_reg.h
index ecd3af415..cf3f159e7 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_reg.h
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_reg.h
@@ -2736,7 +2736,7 @@
 #define _F_DENORMALIZE(v, f)    (((v) << _F_START(f)) & _F_MASK(f))
 
 /* Global macros */
-#define FIELD_GET(x, reg, field) \
+#define DDK750_FIELD_GET(x, reg, field) \
 ( \
     _F_NORMALIZE((x), reg ## _ ## field) \
 )
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_timer.c b/drivers/gpu/drm/smi/ddk768/ddk768_timer.c
index 23d76dc7d..b1ec76491 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_timer.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_timer.c
@@ -87,7 +87,7 @@ unsigned long timerRawIntPending(
        Timer 0 address + ( timer number x 4 )
     */
     ulTimerAddr = TIMER_CONTROL + (timer << 2);
-    rawIntStatus = FIELD_GET(peekRegisterDWord(ulTimerAddr), TIMER_CONTROL, RAWINT_STATUS);
+    rawIntStatus = DDK750_FIELD_GET(peekRegisterDWord(ulTimerAddr), TIMER_CONTROL, RAWINT_STATUS);
 
     return(rawIntStatus);
 }
@@ -157,7 +157,7 @@ unsigned long timerGetCounter(
        Timer 0 address + ( timer number x 4 )
     */
     ulTimerAddr = TIMER_CONTROL + (timer << 2);
-    ulCounter = FIELD_GET(peekRegisterDWord(ulTimerAddr), TIMER_CONTROL, COUNTER);
+    ulCounter = DDK750_FIELD_GET(peekRegisterDWord(ulTimerAddr), TIMER_CONTROL, COUNTER);
 
     return(ulCounter);
 }
@@ -266,7 +266,7 @@ unsigned long timerIntMask(
  */
 void timerIsrTemplate(unsigned long status)
 {
-    if (FIELD_GET(status, INT_STATUS, TIMER0) == INT_STATUS_TIMER0_ACTIVE)
+    if (DDK750_FIELD_GET(status, INT_STATUS, TIMER0) == INT_STATUS_TIMER0_ACTIVE)
     {
         /* Perform ISR action for timer 0 here */
         incTestCounter();
@@ -274,7 +274,7 @@ void timerIsrTemplate(unsigned long status)
         timerClearRawInt(0);
     }            
 
-    if (FIELD_GET(status, INT_STATUS, TIMER1) == INT_STATUS_TIMER1_ACTIVE)
+    if (DDK750_FIELD_GET(status, INT_STATUS, TIMER1) == INT_STATUS_TIMER1_ACTIVE)
     {
         /* Perform ISR action for timer 1 here */
         incTestCounter();
@@ -282,7 +282,7 @@ void timerIsrTemplate(unsigned long status)
         timerClearRawInt(1);
     }            
 
-    if (FIELD_GET(status, INT_STATUS, TIMER2) == INT_STATUS_TIMER2_ACTIVE)
+    if (DDK750_FIELD_GET(status, INT_STATUS, TIMER2) == INT_STATUS_TIMER2_ACTIVE)
     {
         /* Perform ISR action for timer 2 here */
         incTestCounter();
@@ -290,7 +290,7 @@ void timerIsrTemplate(unsigned long status)
         timerClearRawInt(2);
     }            
 
-    if (FIELD_GET(status, INT_STATUS, TIMER3) == INT_STATUS_TIMER3_ACTIVE)
+    if (DDK750_FIELD_GET(status, INT_STATUS, TIMER3) == INT_STATUS_TIMER3_ACTIVE)
     {
         /* Perform ISR action for timer 3 here */
         incTestCounter();
diff --git a/drivers/gpu/drm/smi/ddk768/ddk768_video.c b/drivers/gpu/drm/smi/ddk768/ddk768_video.c
index 32738f6b9..4841f2279 100644
--- a/drivers/gpu/drm/smi/ddk768/ddk768_video.c
+++ b/drivers/gpu/drm/smi/ddk768/ddk768_video.c
@@ -89,7 +89,7 @@ unsigned long videoGetBufferStatus(
     unsigned long bufferIndex
 )
 {
-        return (FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, STATUS));
+        return (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, STATUS));
 }
 
 /*
@@ -102,7 +102,7 @@ unsigned long videoGetBufferStatus(
  */
 unsigned short videoGetPitch()
 {
-    return (FIELD_GET(peekRegisterDWord(VIDEO_FB_WIDTH), VIDEO_FB_WIDTH, WIDTH));
+    return (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_WIDTH), VIDEO_FB_WIDTH, WIDTH));
 }
 
 /*
@@ -115,7 +115,7 @@ unsigned short videoGetPitch()
  */
 unsigned short videoGetLineOffset()
 {
-    return (FIELD_GET(peekRegisterDWord(VIDEO_FB_WIDTH), VIDEO_FB_WIDTH, OFFSET));
+    return (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_WIDTH), VIDEO_FB_WIDTH, OFFSET));
 }
 
 /*
@@ -134,7 +134,7 @@ unsigned long videoGetBufferSize(
     if (bufferIndex == 0)
     {
         value = (unsigned long)
-            FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, ADDRESS);
+            DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, ADDRESS);
     }
     
     return value;
@@ -155,7 +155,7 @@ unsigned long videoGetBuffer(
     unsigned char bufferIndex
 )
 {
-        return (FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, ADDRESS));
+        return (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_ADDRESS), VIDEO_FB_ADDRESS, ADDRESS));
 }
 
 /*
@@ -214,13 +214,13 @@ unsigned long videoGetBufferLastAddress(
     if (bufferIndex == 0)
     {
         /* Get Video Buffer 0 Last Address */
-        return (unsigned long) (FIELD_GET(peekRegisterDWord(VIDEO_FB_0_LAST_ADDRESS), 
+        return (unsigned long) (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_0_LAST_ADDRESS), 
                                           VIDEO_FB_0_LAST_ADDRESS, ADDRESS));
     }
     else
     {   
         /* Get Video Buffer 1 Last Address */ 
-        return (unsigned long) (FIELD_GET(peekRegisterDWord(VIDEO_FB_1_LAST_ADDRESS), 
+        return (unsigned long) (DDK750_FIELD_GET(peekRegisterDWord(VIDEO_FB_1_LAST_ADDRESS), 
                                           VIDEO_FB_1_LAST_ADDRESS, ADDRESS));
     }
 #endif
@@ -394,8 +394,8 @@ void videoSetWindowSize(
 	regBR = (dispCtrl == CHANNEL0_CTRL)? VIDEO_PLANE_BR : (VIDEO_PLANE_BR+CHANNEL_OFFSET);
 
 	value = peekRegisterDWord(regTL);
-	startX = FIELD_GET(value, VIDEO_PLANE_TL, LEFT);
-	startY = FIELD_GET(value, VIDEO_PLANE_TL, TOP);
+	startX = DDK750_FIELD_GET(value, VIDEO_PLANE_TL, LEFT);
+	startY = DDK750_FIELD_GET(value, VIDEO_PLANE_TL, TOP);
 
 	/* Set bottom and right position */
 	pokeRegisterDWord(regBR,
@@ -425,11 +425,11 @@ void videoGetWindowSize(
 
 	positionTopLeft = peekRegisterDWord(regTL);
 	positionRightBottom = peekRegisterDWord(regBR);
-	videoWidth  = FIELD_GET(positionRightBottom, VIDEO_PLANE_BR, RIGHT) - 
-	              FIELD_GET(positionTopLeft, VIDEO_PLANE_TL, LEFT) + 1 +
+	videoWidth  = DDK750_FIELD_GET(positionRightBottom, VIDEO_PLANE_BR, RIGHT) - 
+	              DDK750_FIELD_GET(positionTopLeft, VIDEO_PLANE_TL, LEFT) + 1 +
 	              gWidthAdjustment;
-	videoHeight = FIELD_GET(positionRightBottom, VIDEO_PLANE_BR, BOTTOM) - 
-	              FIELD_GET(positionTopLeft, VIDEO_PLANE_TL, TOP) + 1 +
+	videoHeight = DDK750_FIELD_GET(positionRightBottom, VIDEO_PLANE_BR, BOTTOM) - 
+	              DDK750_FIELD_GET(positionTopLeft, VIDEO_PLANE_TL, TOP) + 1 +
 	              gHeightAdjustment;
 
     if (pVideoWidth != ((unsigned long *)0))
@@ -544,9 +544,9 @@ void videoGetInitialScale(
 	regScale = (dispCtrl == CHANNEL0_CTRL)? VIDEO_INITIAL_SCALE : (VIDEO_INITIAL_SCALE+CHANNEL_OFFSET);
 
     *pBufferHInitScale = (unsigned short)
-        FIELD_GET(peekRegisterDWord(regScale), VIDEO_INITIAL_SCALE, HORIZONTAL);
+        DDK750_FIELD_GET(peekRegisterDWord(regScale), VIDEO_INITIAL_SCALE, HORIZONTAL);
     *pBufferVInitScale = (unsigned short)
-        FIELD_GET(peekRegisterDWord(regScale), VIDEO_INITIAL_SCALE, VERTICAL);
+        DDK750_FIELD_GET(peekRegisterDWord(regScale), VIDEO_INITIAL_SCALE, VERTICAL);
 }
 
 /*
@@ -670,7 +670,7 @@ void videoGetInterpolation(
     value = peekRegisterDWord(VIDEO_DISPLAY_CTRL);
     if (pHorzInterpolationStatus != (unsigned long *)0)
 	{
-		if (FIELD_GET(value, VIDEO_DISPLAY_CTRL, HORIZONTAL_MODE) == VIDEO_DISPLAY_CTRL_HORIZONTAL_MODE_INTERPOLATE)
+		if (DDK750_FIELD_GET(value, VIDEO_DISPLAY_CTRL, HORIZONTAL_MODE) == VIDEO_DISPLAY_CTRL_HORIZONTAL_MODE_INTERPOLATE)
         	*pHorzInterpolationStatus = 1;
 		else
 			*pHorzInterpolationStatus = 0;
@@ -678,7 +678,7 @@ void videoGetInterpolation(
         
     if (pHorzInterpolationStatus != (unsigned long *)0)
 	{
-		if (FIELD_GET(value, VIDEO_DISPLAY_CTRL, VERTICAL_MODE) == VIDEO_DISPLAY_CTRL_VERTICAL_MODE_INTERPOLATE)
+		if (DDK750_FIELD_GET(value, VIDEO_DISPLAY_CTRL, VERTICAL_MODE) == VIDEO_DISPLAY_CTRL_VERTICAL_MODE_INTERPOLATE)
 			*pVertInterpolationStatus = 1;
 		else
 			*pVertInterpolationStatus = 0;
@@ -746,7 +746,7 @@ unsigned char isVideoEnable()
     
     value = peekRegisterDWord(VIDEO_DISPLAY_CTRL);
     
-    return ((FIELD_GET(value, VIDEO_DISPLAY_CTRL, PLANE) == VIDEO_DISPLAY_CTRL_PLANE_ENABLE) ? 1 : 0);
+    return ((DDK750_FIELD_GET(value, VIDEO_DISPLAY_CTRL, PLANE) == VIDEO_DISPLAY_CTRL_PLANE_ENABLE) ? 1 : 0);
 }
 
 /*
@@ -880,9 +880,9 @@ unsigned long videoGetEdgeDetection(
         value = peekRegisterDWord(VIDEO_EDGE_DETECTION);
         
         if (pEdgeDetectValue != (unsigned long *)0)
-            *pEdgeDetectValue = (unsigned long) FIELD_GET(value, VIDEO_EDGE_DETECTION, VALUE);
+            *pEdgeDetectValue = (unsigned long) DDK750_FIELD_GET(value, VIDEO_EDGE_DETECTION, VALUE);
             
-        if (FIELD_GET(value, VIDEO_EDGE_DETECTION, DETECT) == VIDEO_EDGE_DETECTION_DETECT_ENABLE)
+        if (DDK750_FIELD_GET(value, VIDEO_EDGE_DETECTION, DETECT) == VIDEO_EDGE_DETECTION_DETECT_ENABLE)
             return 1;
         else
             return 0; 
diff --git a/drivers/gpu/drm/smi/hw750.c b/drivers/gpu/drm/smi/hw750.c
index 102789681..58741b86c 100644
--- a/drivers/gpu/drm/smi/hw750.c
+++ b/drivers/gpu/drm/smi/hw750.c
@@ -247,14 +247,14 @@ int hw750_check_vsync_interrupt(int path)
 	
 	if(path == PRIMARY_CTRL)
 	{
-	    if ((FIELD_GET(value1, RAW_INT, PRIMARY_VSYNC) == RAW_INT_PRIMARY_VSYNC_ACTIVE)
-			&&(FIELD_GET(value2, INT_MASK, PRIMARY_VSYNC) == INT_MASK_PRIMARY_VSYNC_ENABLE))
+	    if ((DDK750_FIELD_GET(value1, RAW_INT, PRIMARY_VSYNC) == RAW_INT_PRIMARY_VSYNC_ACTIVE)
+			&&(DDK750_FIELD_GET(value2, INT_MASK, PRIMARY_VSYNC) == INT_MASK_PRIMARY_VSYNC_ENABLE))
 	    {
 			return true;
 		}
 	}else{
-		if ((FIELD_GET(value1, RAW_INT, SECONDARY_VSYNC) == RAW_INT_SECONDARY_VSYNC_ACTIVE)
-			&&(FIELD_GET(value2, INT_MASK, SECONDARY_VSYNC) == INT_MASK_SECONDARY_VSYNC_ENABLE))
+		if ((DDK750_FIELD_GET(value1, RAW_INT, SECONDARY_VSYNC) == RAW_INT_SECONDARY_VSYNC_ACTIVE)
+			&&(DDK750_FIELD_GET(value2, INT_MASK, SECONDARY_VSYNC) == INT_MASK_SECONDARY_VSYNC_ENABLE))
 		{
 			return true;
 		}
diff --git a/drivers/gpu/drm/smi/hw768.c b/drivers/gpu/drm/smi/hw768.c
index 04c25db2b..2df9eccd1 100644
--- a/drivers/gpu/drm/smi/hw768.c
+++ b/drivers/gpu/drm/smi/hw768.c
@@ -164,7 +164,7 @@ int hw768_check_iis_interrupt(void)
 	value = peekRegisterDWord(INT_STATUS);
 
 	
-    if (FIELD_GET(value, INT_STATUS, I2S) == INT_STATUS_I2S_ACTIVE)
+    if (DDK750_FIELD_GET(value, INT_STATUS, I2S) == INT_STATUS_I2S_ACTIVE)
 		return true;
 	else	
 		return false;
@@ -181,14 +181,14 @@ int hw768_check_vsync_interrupt(int path)
 
 	if(path == CHANNEL0_CTRL)
 	{
-	    if ((FIELD_GET(value1, RAW_INT, CHANNEL0_VSYNC) == RAW_INT_CHANNEL0_VSYNC_ACTIVE)
-			&&(FIELD_GET(value2, INT_MASK, CHANNEL0_VSYNC) == INT_MASK_CHANNEL0_VSYNC_ENABLE))
+	    if ((DDK750_FIELD_GET(value1, RAW_INT, CHANNEL0_VSYNC) == RAW_INT_CHANNEL0_VSYNC_ACTIVE)
+			&&(DDK750_FIELD_GET(value2, INT_MASK, CHANNEL0_VSYNC) == INT_MASK_CHANNEL0_VSYNC_ENABLE))
 	    {
 			return true;
 		}
 	}else{
-		if ((FIELD_GET(value1, RAW_INT, CHANNEL1_VSYNC) == RAW_INT_CHANNEL1_VSYNC_ACTIVE)
-			&&(FIELD_GET(value2, INT_MASK, CHANNEL1_VSYNC) == INT_MASK_CHANNEL1_VSYNC_ENABLE))
+		if ((DDK750_FIELD_GET(value1, RAW_INT, CHANNEL1_VSYNC) == RAW_INT_CHANNEL1_VSYNC_ACTIVE)
+			&&(DDK750_FIELD_GET(value2, INT_MASK, CHANNEL1_VSYNC) == INT_MASK_CHANNEL1_VSYNC_ENABLE))
 		{
 			return true;
 		}
diff --git a/drivers/gpu/drm/smi/smi_ttm.c b/drivers/gpu/drm/smi/smi_ttm.c
index 06a1d7c07..b8ab69a7f 100644
--- a/drivers/gpu/drm/smi/smi_ttm.c
+++ b/drivers/gpu/drm/smi/smi_ttm.c
@@ -8,7 +8,7 @@
  */
  
 #include <drm/drmP.h>
-#include <ttm/ttm_page_alloc.h>
+#include <drm/ttm/ttm_page_alloc.h>
 #include "smi_drv.h"
 
 static inline struct smi_device *
-- 
2.39.1

