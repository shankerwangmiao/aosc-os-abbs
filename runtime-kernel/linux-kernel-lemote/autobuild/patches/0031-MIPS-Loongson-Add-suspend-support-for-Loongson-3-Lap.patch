From 15a4576106a7b589c01c0d1c60af3ed91002077a Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Thu, 1 Dec 2016 09:51:35 +0800
Subject: [PATCH 031/136] MIPS: Loongson: Add suspend support for Loongson-3
 Laptop.

Add standby and suspend functions for Loongson-3 based laptops.

Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Hongliang Tao <taohl@lemote.com>
Signed-off-by: Hua Yan <yanh@lemote.com>
---
 .../include/asm/mach-loongson64/loongson.h    |   4 +
 arch/mips/loongson64/common/pm.c              |  76 ++------
 arch/mips/loongson64/fuloong-2e/Makefile      |   2 +
 arch/mips/loongson64/fuloong-2e/pm.c          |  55 ++++++
 arch/mips/loongson64/lemote-2f/pm.c           |  51 ++++-
 arch/mips/loongson64/loongson-3/Makefile      |   2 +
 arch/mips/loongson64/loongson-3/acpi_init.c   |  29 +++
 arch/mips/loongson64/loongson-3/pm.c          | 137 ++++++++++++++
 arch/mips/loongson64/loongson-3/sleep.S       | 176 ++++++++++++++++++
 9 files changed, 467 insertions(+), 65 deletions(-)
 create mode 100644 arch/mips/loongson64/fuloong-2e/pm.c
 create mode 100644 arch/mips/loongson64/loongson-3/pm.c
 create mode 100644 arch/mips/loongson64/loongson-3/sleep.S

diff --git a/arch/mips/include/asm/mach-loongson64/loongson.h b/arch/mips/include/asm/mach-loongson64/loongson.h
index 16e8c9079..159f87b8e 100644
--- a/arch/mips/include/asm/mach-loongson64/loongson.h
+++ b/arch/mips/include/asm/mach-loongson64/loongson.h
@@ -353,4 +353,8 @@ extern unsigned long _loongson_addrwincfg_base;
 
 #endif	/* ! CONFIG_CPU_SUPPORTS_ADDRWINCFG */
 
+void mach_suspend(void);
+void mach_resume(void);
+void loongson_suspend_enter(void);
+
 #endif /* __ASM_MACH_LOONGSON64_LOONGSON_H */
diff --git a/arch/mips/loongson64/common/pm.c b/arch/mips/loongson64/common/pm.c
index b8aed878d..20ba690f0 100644
--- a/arch/mips/loongson64/common/pm.c
+++ b/arch/mips/loongson64/common/pm.c
@@ -2,8 +2,9 @@
 /*
  * loongson-specific suspend support
  *
- *  Copyright (C) 2009 Lemote Inc.
+ *  Copyright (C) 2009 - 2012 Lemote Inc.
  *  Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *          Huacai Chen <chenhc@lemote.com>
  */
 #include <linux/suspend.h>
 #include <linux/interrupt.h>
@@ -53,69 +54,10 @@ void arch_suspend_enable_irqs(void)
 	(void)LOONGSON_INTENSET;
 }
 
-/*
- * Setup the board-specific events for waking up loongson from wait mode
- */
-void __weak setup_wakeup_events(void)
-{
-}
-
-/*
- * Check wakeup events
- */
-int __weak wakeup_loongson(void)
-{
-	return 1;
-}
-
-/*
- * If the events are really what we want to wakeup the CPU, wake it up
- * otherwise put the CPU asleep again.
- */
-static void wait_for_wakeup_events(void)
-{
-	while (!wakeup_loongson())
-		LOONGSON_CHIPCFG(0) &= ~0x7;
-}
-
-/*
- * Stop all perf counters
- *
- * $24 is the control register of Loongson perf counter
- */
-static inline void stop_perf_counters(void)
-{
-	__write_64bit_c0_register($24, 0, 0);
-}
-
-
-static void loongson_suspend_enter(void)
-{
-	static unsigned int cached_cpu_freq;
-
-	/* setup wakeup events via enabling the IRQs */
-	setup_wakeup_events();
-
-	stop_perf_counters();
-
-	cached_cpu_freq = LOONGSON_CHIPCFG(0);
-
-	/* Put CPU into wait mode */
-	LOONGSON_CHIPCFG(0) &= ~0x7;
-
-	/* wait for the given events to wakeup cpu from wait mode */
-	wait_for_wakeup_events();
-
-	LOONGSON_CHIPCFG(0) = cached_cpu_freq;
-	mmiowb();
-}
-
-void __weak mach_suspend(void)
-{
-}
-
-void __weak mach_resume(void)
+static int loongson_pm_begin(suspend_state_t state)
 {
+	pm_set_suspend_via_firmware();
+	return 0;
 }
 
 static int loongson_pm_enter(suspend_state_t state)
@@ -124,6 +66,7 @@ static int loongson_pm_enter(suspend_state_t state)
 
 	/* processor specific suspend */
 	loongson_suspend_enter();
+	pm_set_resume_via_firmware();
 
 	mach_resume();
 
@@ -134,9 +77,15 @@ static int loongson_pm_valid_state(suspend_state_t state)
 {
 	switch (state) {
 	case PM_SUSPEND_ON:
+		return 1;
+
 	case PM_SUSPEND_STANDBY:
 	case PM_SUSPEND_MEM:
+#ifndef CONFIG_CPU_LOONGSON3
 		return 1;
+#else
+		return !!loongson_sysconf.suspend_addr;
+#endif
 
 	default:
 		return 0;
@@ -145,6 +94,7 @@ static int loongson_pm_valid_state(suspend_state_t state)
 
 static const struct platform_suspend_ops loongson_pm_ops = {
 	.valid	= loongson_pm_valid_state,
+	.begin	= loongson_pm_begin,
 	.enter	= loongson_pm_enter,
 };
 
diff --git a/arch/mips/loongson64/fuloong-2e/Makefile b/arch/mips/loongson64/fuloong-2e/Makefile
index bb58edb3b..8d0e4ace5 100644
--- a/arch/mips/loongson64/fuloong-2e/Makefile
+++ b/arch/mips/loongson64/fuloong-2e/Makefile
@@ -4,3 +4,5 @@
 #
 
 obj-y += irq.o reset.o dma.o
+
+obj-$(CONFIG_SUSPEND) += pm.o
diff --git a/arch/mips/loongson64/fuloong-2e/pm.c b/arch/mips/loongson64/fuloong-2e/pm.c
new file mode 100644
index 000000000..98cc04a9d
--- /dev/null
+++ b/arch/mips/loongson64/fuloong-2e/pm.c
@@ -0,0 +1,55 @@
+/*
+ *  Lemote loongson2e family machines' specific suspend support
+ *
+ *  Copyright (C) 2009 Lemote Inc.
+ *  Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/suspend.h>
+#include <linux/interrupt.h>
+#include <linux/pm.h>
+#include <linux/export.h>
+
+#include <asm/mipsregs.h>
+#include <asm/bootinfo.h>
+
+#include <loongson.h>
+
+/*
+ * Stop all perf counters
+ *
+ * $24 is the control register of Loongson perf counter
+ */
+static inline void stop_perf_counters(void)
+{
+	__write_64bit_c0_register($24, 0, 0);
+}
+
+void loongson_suspend_enter(void)
+{
+	static unsigned int cached_cpu_freq;
+
+	stop_perf_counters();
+
+	cached_cpu_freq = LOONGSON_CHIPCFG(0);
+
+	/* Put CPU into wait mode */
+	LOONGSON_CHIPCFG(0) &= ~0x7;
+
+	/* wait for events to wakeup cpu from wait mode */
+	LOONGSON_CHIPCFG(0) = cached_cpu_freq;
+	mmiowb();
+}
+
+void mach_suspend(void)
+{
+}
+
+void mach_resume(void)
+{
+}
diff --git a/arch/mips/loongson64/lemote-2f/pm.c b/arch/mips/loongson64/lemote-2f/pm.c
index 3d0027229..ec1a68fc0 100644
--- a/arch/mips/loongson64/lemote-2f/pm.c
+++ b/arch/mips/loongson64/lemote-2f/pm.c
@@ -49,6 +49,9 @@ static int i8042_enable_kbd_port(void)
 	return 0;
 }
 
+/*
+ * Setup the board-specific events for waking up loongson from wait mode
+ */
 void setup_wakeup_events(void)
 {
 	int irq_mask;
@@ -87,6 +90,9 @@ static void yeeloong_lid_update_task(struct work_struct *work)
 		yeeloong_report_lid_status(BIT_LID_DETECT_ON);
 }
 
+/*
+ * Check wakeup events
+ */
 int wakeup_loongson(void)
 {
 	int irq;
@@ -134,12 +140,53 @@ int wakeup_loongson(void)
 	return 0;
 }
 
-void __weak mach_suspend(void)
+/*
+ * If the events are really what we want to wakeup the CPU, wake it up
+ * otherwise put the CPU asleep again.
+ */
+static void wait_for_wakeup_events(void)
+{
+	while (!wakeup_loongson())
+		LOONGSON_CHIPCFG(0) &= ~0x7;
+}
+
+/*
+ * Stop all perf counters
+ *
+ * $24 is the control register of Loongson perf counter
+ */
+static inline void stop_perf_counters(void)
+{
+	__write_64bit_c0_register($24, 0, 0);
+}
+
+void loongson_suspend_enter(void)
+{
+	static unsigned int cached_cpu_freq;
+
+	/* setup wakeup events via enabling the IRQs */
+	setup_wakeup_events();
+
+	stop_perf_counters();
+
+	cached_cpu_freq = LOONGSON_CHIPCFG(0);
+
+	/* Put CPU into wait mode */
+	LOONGSON_CHIPCFG(0) &= ~0x7;
+
+	/* wait for the given events to wakeup cpu from wait mode */
+	wait_for_wakeup_events();
+
+	LOONGSON_CHIPCFG(0) = cached_cpu_freq;
+	mmiowb();
+}
+
+void mach_suspend(void)
 {
 	disable_mfgpt0_counter();
 }
 
-void __weak mach_resume(void)
+void mach_resume(void)
 {
 	enable_mfgpt0_counter();
 }
diff --git a/arch/mips/loongson64/loongson-3/Makefile b/arch/mips/loongson64/loongson-3/Makefile
index c849c3fea..89ebb7fa3 100644
--- a/arch/mips/loongson64/loongson-3/Makefile
+++ b/arch/mips/loongson64/loongson-3/Makefile
@@ -8,4 +8,6 @@ obj-$(CONFIG_SMP)	+= smp.o
 
 obj-$(CONFIG_NUMA)	+= numa.o
 
+obj-$(CONFIG_SUSPEND)	+= pm.o sleep.o
+
 obj-$(CONFIG_RS780_HPET) += hpet.o
diff --git a/arch/mips/loongson64/loongson-3/acpi_init.c b/arch/mips/loongson64/loongson-3/acpi_init.c
index 8d7c119dd..c8c0699d8 100644
--- a/arch/mips/loongson64/loongson-3/acpi_init.c
+++ b/arch/mips/loongson64/loongson-3/acpi_init.c
@@ -78,6 +78,35 @@ static void acpi_hw_clear_status(void)
 	outl(inl(ACPI_GPE0_BLK), ACPI_GPE0_BLK);
 }
 
+void acpi_sleep_prepare(void)
+{
+	u16 value;
+
+	acpi_hw_clear_status();
+
+	/* PMEnable: Enable PwrBtn */
+	value = inw(ACPI_PM_EVT_BLK + 2);
+	value |= 1 << 8;
+	outw(value, ACPI_PM_EVT_BLK + 2);
+
+	/* Turn ON LED blink */
+	value = pm_ioread(0x7c);
+	value = (value & ~0xc) | 0x8;
+	pm_iowrite(0x7c, value);
+}
+
+void acpi_sleep_complete(void)
+{
+	u8 value;
+
+	acpi_hw_clear_status();
+
+	/* Turn OFF LED blink */
+	value = pm_ioread(0x7c);
+	value |= 0xc;
+	pm_iowrite(0x7c, value);
+}
+
 void acpi_registers_setup(void)
 {
 	u32 value;
diff --git a/arch/mips/loongson64/loongson-3/pm.c b/arch/mips/loongson64/loongson-3/pm.c
new file mode 100644
index 000000000..ef0b9cfc4
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/pm.c
@@ -0,0 +1,137 @@
+/*
+ *  Lemote Loongson-3A family machines' specific suspend support
+ *
+ *  Copyright (C) 2009 Lemote Inc.
+ *  Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *  Author: Chen Huacai <chenhuacai@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/suspend.h>
+#include <linux/interrupt.h>
+#include <linux/pm.h>
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/delay.h>
+
+#include <asm/mipsregs.h>
+#include <asm/bootinfo.h>
+#include <asm/tlbflush.h>
+
+#include <loongson.h>
+#include <mc146818rtc.h>
+
+extern void irq_router_init(void);
+extern void acpi_sleep_prepare(void);
+extern void acpi_sleep_complete(void);
+extern void acpi_registers_setup(void);
+
+u32 loongson_nr_nodes;
+u64 loongson_suspend_addr;
+u32 loongson_pcache_ways;
+u32 loongson_scache_ways;
+u32 loongson_pcache_sets;
+u32 loongson_scache_sets;
+u32 loongson_pcache_linesz;
+u32 loongson_scache_linesz;
+
+struct loongson_registers {
+	u32 config4;
+	u32 config6;
+	u64 pgd;
+	u64 kpgd;
+	u32 pwctl;
+	u64 pwbase;
+	u64 pwsize;
+	u64 pwfield;
+	u32 hwrena;
+	u64 userlocal;
+};
+static struct loongson_registers loongson_regs;
+
+uint64_t cmos_read64(unsigned long addr)
+{
+	unsigned char bytes[8];
+	int i;
+
+	for (i=0; i<8; i++)
+		bytes[i] = CMOS_READ(addr + i);
+
+	return *(uint64_t *)bytes;
+}
+
+void cmos_write64(uint64_t data, unsigned long addr)
+{
+	int i;
+	unsigned char * bytes = (unsigned char *)&data;
+
+	for (i=0; i<8; i++)
+		CMOS_WRITE(bytes[i], addr + i);
+}
+
+void mach_suspend(void)
+{
+	acpi_sleep_prepare();
+
+	if (cpu_has_ftlb) {
+		loongson_regs.config4 = read_c0_config4();
+		loongson_regs.config6 = read_c0_config6();
+	}
+
+	if (cpu_has_ldpte) {
+		loongson_regs.pgd = read_c0_pgd();
+		loongson_regs.kpgd = read_c0_kpgd();
+		loongson_regs.pwctl = read_c0_pwctl();
+		loongson_regs.pwbase = read_c0_pwbase();
+		loongson_regs.pwsize = read_c0_pwsize();
+		loongson_regs.pwfield = read_c0_pwfield();
+	}
+
+	if (cpu_has_userlocal) {
+		loongson_regs.hwrena = read_c0_hwrena();
+		loongson_regs.userlocal = read_c0_userlocal();
+	}
+
+	loongson_nr_nodes = loongson_sysconf.nr_nodes;
+	loongson_suspend_addr = loongson_sysconf.suspend_addr;
+	loongson_pcache_ways = cpu_data[0].dcache.ways;
+	loongson_scache_ways = cpu_data[0].scache.ways;
+	loongson_pcache_sets = cpu_data[0].dcache.sets;
+	loongson_scache_sets = cpu_data[0].scache.sets*4;
+	loongson_pcache_linesz = cpu_data[0].dcache.linesz;
+	loongson_scache_linesz = cpu_data[0].scache.linesz;
+}
+
+void mach_resume(void)
+{
+	local_flush_tlb_all();
+	cmos_write64(0x0, 0x40);  /* clear pc in cmos */
+	cmos_write64(0x0, 0x48);  /* clear sp in cmos */
+
+	if (cpu_has_ftlb) {
+		write_c0_config4(loongson_regs.config4);
+		write_c0_config6(loongson_regs.config6);
+	}
+
+	if (cpu_has_ldpte) {
+		write_c0_pgd(loongson_regs.pgd);
+		write_c0_kpgd(loongson_regs.kpgd);
+		write_c0_pwctl(loongson_regs.pwctl);
+		write_c0_pwbase(loongson_regs.pwbase);
+		write_c0_pwsize(loongson_regs.pwsize);
+		write_c0_pwfield(loongson_regs.pwfield);
+	}
+
+	if (cpu_has_userlocal) {
+		write_c0_hwrena(loongson_regs.hwrena);
+		write_c0_userlocal(loongson_regs.userlocal);
+	}
+
+	irq_router_init();
+	acpi_registers_setup();
+	acpi_sleep_complete();
+}
diff --git a/arch/mips/loongson64/loongson-3/sleep.S b/arch/mips/loongson64/loongson-3/sleep.S
new file mode 100644
index 000000000..bdee2da4e
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/sleep.S
@@ -0,0 +1,176 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Sleep helper for Loongson-3A sleep mode, derived from Au1xxx.
+ *
+ * Copyright (C) 2011 Huacai Chen <chenhc@lemote.com>
+ */
+
+#include <asm/asm.h>
+#include <asm/asmmacro.h>
+#include <asm/mipsregs.h>
+#include <asm/stackframe.h>
+
+	.extern cmos_write64
+	.extern loongson_nr_nodes
+	.extern loongson_suspend_addr
+	.extern loongson_pcache_ways
+	.extern loongson_pcache_sets
+	.extern loongson_pcache_linesz
+	.extern loongson_scache_ways
+	.extern loongson_scache_sets
+	.extern loongson_scache_linesz
+
+	.text
+	.set push
+	.set noat
+	.set reorder
+	.align	5
+	.set	mips64
+
+/* preparatory stuff */
+.macro	SETUP_SLEEP
+	dsubu	sp, PT_SIZE
+	sd	$1, PT_R1(sp)
+	sd	$2, PT_R2(sp)
+	sd	$3, PT_R3(sp)
+	sd	$4, PT_R4(sp)
+	sd	$5, PT_R5(sp)
+	sd	$6, PT_R6(sp)
+	sd	$7, PT_R7(sp)
+	sd	$16, PT_R16(sp)
+	sd	$17, PT_R17(sp)
+	sd	$18, PT_R18(sp)
+	sd	$19, PT_R19(sp)
+	sd	$20, PT_R20(sp)
+	sd	$21, PT_R21(sp)
+	sd	$22, PT_R22(sp)
+	sd	$23, PT_R23(sp)
+	sd	$26, PT_R26(sp)
+	sd	$27, PT_R27(sp)
+	sd	$28, PT_R28(sp)
+	sd	$30, PT_R30(sp)
+	sd	$31, PT_R31(sp)
+	mfc0	k0, CP0_EBASE
+	sw	k0, PT_R8(sp)
+	mfc0	k0, CP0_STATUS
+	sw	k0, PT_R9(sp)
+	mfc0	k0, CP0_CONFIG
+	sw	k0, PT_R10(sp)
+	mfc0	k0, CP0_PAGEMASK   /* Loongson-3 has sub-registers */
+	sw	k0, PT_R11(sp)
+	mfc0	k0, CP0_PAGEGRAIN  /* Loongson-3 has sub-registers */
+	sw	k0, PT_R12(sp)
+	dmfc0	k0, CP0_CONTEXT
+	sd	k0, PT_R13(sp)
+	dmfc0	k0, CP0_XCONTEXT
+	sd	k0, PT_R14(sp)
+
+	/* Now set up the "wakeup vector" in  RTC space so the boot rom will
+	 * return to this point upon wakeup.
+	 * 0x40 : RA,  0x48 : SP
+	 */
+	daddi	a0, sp, 0
+	li      a1, 0x48
+	jal     cmos_write64
+	dla	a0, wakeup_start	/* resume path */
+	li      a1, 0x40
+	jal     cmos_write64
+.endm
+
+/* Sleep code for Loongson-3 */
+LEAF(loongson_suspend_enter)
+	SETUP_SLEEP
+
+	/* a0:address a1:L1_sets a2:L1_ways a3:L1_linesize */
+	li a0, 0x80000000
+	lw a1, loongson_pcache_sets
+	lw a2, loongson_pcache_ways
+	lw a3, loongson_pcache_linesz
+flushL1:
+	move  t0, a2
+1:	cache 0, (a0)
+	cache 1, (a0)
+	addiu a0, a0, 1
+	addiu t0, t0, -1
+	bnez  t0, 1b
+	subu  a0, a0, a2
+	addu  a0, a0, a3
+	addiu a1, a1, -1
+	bnez  a1, flushL1
+
+	/* a0:nr_nodes a1:address a2:L2_sets a3:L2_ways t8:L2_linesize */
+	lw  a0, loongson_nr_nodes
+	dli a1, 0x9800000000000000
+	lw  a3, loongson_scache_ways
+	lw  t8, loongson_scache_linesz
+flushL2_all:
+	lw  a2, loongson_scache_sets
+	dli t9, 0x100000000000
+flushL2_node:
+	move   t0, a3
+1:	cache  3, (a1)
+	daddiu a1, a1, 1
+	addiu  t0, t0, -1
+	bnez   t0, 1b
+	dsubu  a1, a1, a3
+	daddu  a1, a1, t8
+	addiu  a2, a2, -1
+	bnez   a2, flushL2_node
+	daddu  a1, a1, t9
+	addiu  a0, a0, -1
+	bnez   a0, flushL2_all
+
+	ld  v0, loongson_suspend_addr /* Call BIOS's STR sleep routine */
+	jr  v0
+	nop
+END(loongson_suspend_enter)
+
+	/* This is where we return upon wakeup.
+	 * Reload all of the registers and return.
+	 */
+LEAF(wakeup_start)
+	lw	k0, PT_R8(sp)
+	mtc0	k0, CP0_EBASE
+	lw	k0, PT_R9(sp)
+	mtc0	k0, CP0_STATUS
+	lw	k0, PT_R10(sp)
+	mtc0	k0, CP0_CONFIG
+	lw	k0, PT_R11(sp)
+	mtc0	k0, CP0_PAGEMASK
+	lw	k0, PT_R12(sp)
+	mtc0	k0, CP0_PAGEGRAIN
+	ld	k0, PT_R13(sp)
+	dmtc0	k0, CP0_CONTEXT
+	ld	k0, PT_R14(sp)
+	dmtc0	k0, CP0_XCONTEXT
+
+	nop
+	ld	$1, PT_R1(sp)
+	ld	$2, PT_R2(sp)
+	ld	$3, PT_R3(sp)
+	ld	$4, PT_R4(sp)
+	ld	$5, PT_R5(sp)
+	ld	$6, PT_R6(sp)
+	ld	$7, PT_R7(sp)
+	ld	$16, PT_R16(sp)
+	ld	$17, PT_R17(sp)
+	ld	$18, PT_R18(sp)
+	ld	$19, PT_R19(sp)
+	ld	$20, PT_R20(sp)
+	ld	$21, PT_R21(sp)
+	ld	$22, PT_R22(sp)
+	ld	$23, PT_R23(sp)
+	ld	$26, PT_R26(sp)
+	ld	$27, PT_R27(sp)
+	ld	$28, PT_R28(sp)
+	ld	$30, PT_R30(sp)
+	ld	$31, PT_R31(sp)
+
+	daddiu	sp, PT_SIZE
+	jr	ra
+END(wakeup_start)
+
+	.set pop
-- 
2.39.1

