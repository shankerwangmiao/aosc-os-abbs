# FIXME: No Rustup bootstrap binaries for these architectures yet.
if ab_match_arch loongson3 || \
   ab_match_arch mips64r6el; then
    SRC_PARENT="$(realpath $SRCDIR/..)"
    abinfo "Extracting bootstrapped Stage 1 Rust toolchain..."
    bsdtar xf "$SRC_PARENT"/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}.tar.xz \
        -C "$SRC_PARENT"

    abinfo "Copying bootstrapped Stage 1 Rust toolchain ..."
    cp -rv "$SRC_PARENT"/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}/opt/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH} \
        /opt

    if [ ! -e /opt/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}/bin/rustc ] ; then
        abdie "Help! Stage 1 Rust toolchain does not exist in the desired directory."
    fi
fi

abinfo "Appending -fPIC ..."
export CFLAGS="${CFLAGS} -fPIC"
export CXXFLAGS="${CXXFLAGS} -fPIC"
export LDFLAGS="${LDFLAGS} -fPIC"
# Note: Append flags only for Clang-enabled architectures.
if bool $USECLANG; then
    abinfo "Appending target flags ..."
    export CFLAGS="${CFLAGS} --target=${ARCH_TARGET[$ARCH]}"
    export CXXFLAGS="${CXXFLAGS} --target=${ARCH_TARGET[$ARCH]}"
    export LDFLAGS="${LDFLAGS} --target=${ARCH_TARGET[$ARCH]}"
fi

# disable system libgit2 and use vendored version
export LIBGIT2_NO_PKG_CONFIG=1

if ab_match_arch riscv64; then
    rust_target="riscv64gc-unknown-linux-gnu"
elif ab_match_arch loongson3; then
    rust_target="mips64el-unknown-linux-gnuabi64"
elif ab_match_arch mips64r6el; then
    rust_target="mipsisa64r6el-unknown-linux-gnuabi64"
else
    rust_target="${ARCH_TARGET[$ARCH]/-aosc/-unknown}"
fi

abinfo "Generating config.toml ..."
cat > "$SRCDIR"/config.toml <<EOF
changelog-seen = 2

[llvm]
link-shared = true
ninja = true

[build]
python = "/usr/bin/python3"
extended = true
verbose = 2
sanitizers = true
profiler = true
print-step-timings = true
EOF

if ab_match_arch loongson3 || \
   ab_match_arch mips64r6el; then
    abinfo "Using local bootstrap binaries ..."
    cat >> "$SRCDIR"/config.toml << EOF
cargo = "/opt/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}/bin/cargo"
rustc = "/opt/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}/bin/rustc"
rustfmt = "/opt/rustc-bootstrap-${PKGVER}-${CROSS:-$ARCH}/bin/rustfmt"
EOF
fi

# FIXME: use vendored dependencies in 1.75.0 if possible
if ab_match_arch mips64r6el; then
    cat >> "$SRCDIR"/config.toml << EOF
vendor = false
EOF
else
    cat >> "$SRCDIR"/config.toml << EOF
vendor = true
EOF
fi

if [[ "${CROSS:-$ARCH}" = "i486" ]]; then
    cat >> "$SRCDIR"/config.toml << EOF
target = [ "${ARCH_TARGET[$ARCH]/-aosc/-unknown}", "i686-unknown-linux-gnu" ]
EOF
fi

if [[ "${CROSS:-$ARCH}" = "armv7hf" ]]; then
    cat >> "$SRCDIR"/config.toml << EOF
target = [ "thumbv7neon-unknown-linux-gnueabihf", "armv7-unknown-linux-gnueabihf" ]
EOF
fi

cat >> "$SRCDIR"/config.toml << EOF
[install]
prefix = "/usr"

[rust]
EOF

if [[ "${CROSS:-$ARCH}" != armv* && \
      "${CROSS:-$ARCH}" != i486 ]]; then
    if ab_match_arch mips64r6el ; then
    abinfo "Applying workaround: Disabing debug info generation for mips64r6el ..."
    cat >> "$SRCDIR"/config.toml << EOF
# Debuginfo generation makes LLVM crash during build on mips64r6el. Turn them off.
debug = false
debuginfo-level = 0
debuginfo-level-rustc = 0
debuginfo-level-std = 0
debuginfo-level-tools = 0
debuginfo-level-tests = 0
split-debuginfo = "off"

# This will trigger warnings during build, instead of errors.
deny-warnings = false
EOF
    else
    cat >> "$SRCDIR"/config.toml << EOF
# LLVM crashes when passing an object through ThinLTO twice.
# This is triggered when using rust code in cross-language
# LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1
debuginfo-level = 2
EOF
    fi
else
    cat >> "$SRCDIR"/config.toml << EOF
# Working around limited VM space on arm32, i486
codegen-units = 1
codegen-units-std = 1
debuginfo-level = 0
EOF
fi

cat >> "$SRCDIR"/config.toml << EOF
channel = "stable"
rpath = false

[target.${rust_target}]
llvm-config = "/usr/bin/llvm-config"
EOF

if [[ "${CROSS:-$ARCH}" = "i486" ]]; then
    cat >> "$SRCDIR"/config.toml << EOF
[target.i686-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"
EOF
fi

if [[ "${CROSS:-$ARCH}" = "armv7" ]]; then
    cat >> "$SRCDIR"/config.toml << EOF
[target.thumbv7neon-unknown-linux-gnueabihf]
llvm-config = "/usr/bin/llvm-config"

[target.armv7-unknown-linux-gnueabihf]
llvm-config = "/usr/bin/llvm-config"
EOF
fi
